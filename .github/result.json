{"numFailedTestSuites":9,"numFailedTests":40,"numPassedTestSuites":2,"numPassedTests":18,"numPendingTestSuites":0,"numPendingTests":302,"numRuntimeErrorTestSuites":1,"numTodoTests":0,"numTotalTestSuites":11,"numTotalTests":360,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1662012022012,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"Should return correct string","location":null,"status":"passed","title":"Should return correct string"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Should add two numbers together","location":null,"status":"passed","title":"Should add two numbers together"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Should return string based on which number is larger","location":null,"status":"passed","title":"Should return string based on which number is larger"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Should return new array of names based on length","location":null,"status":"passed","title":"Should return new array of names based on length"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Should reduce all numbers correctly","location":null,"status":"passed","title":"Should reduce all numbers correctly"}],"endTime":1662012026043,"message":"","name":"E:\\Work\\_Nology\\final project\\js-challenges\\src\\js11-unit-testing\\solution.test.js","startTime":1662012024148,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createFullName() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeDefined\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js2-functions-intro\\js2.test.js:17:45)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"createFullName() tests Should have a return","location":null,"status":"failed","title":"Should have a return"},{"ancestorTitles":["createFullName() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"John Smith\"\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js2-functions-intro\\js2.test.js:21:45)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"createFullName() tests Should work with basic inputs","location":null,"status":"failed","title":"Should work with basic inputs"},{"ancestorTitles":["createFullName() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"abc def\"\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js2-functions-intro\\js2.test.js:25:42)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"createFullName() tests Should work with arbritrary inputs","location":null,"status":"failed","title":"Should work with arbritrary inputs"},{"ancestorTitles":["findSmallestNumber() tests"],"failureMessages":[],"fullName":"findSmallestNumber() tests Should have a return","location":null,"status":"pending","title":"Should have a return"},{"ancestorTitles":["findSmallestNumber() tests"],"failureMessages":[],"fullName":"findSmallestNumber() tests Should return the smallest of two numbers","location":null,"status":"pending","title":"Should return the smallest of two numbers"},{"ancestorTitles":["findSmallestNumber() tests"],"failureMessages":[],"fullName":"findSmallestNumber() tests Should work regardless of order","location":null,"status":"pending","title":"Should work regardless of order"},{"ancestorTitles":["multiplyNumbers() tests"],"failureMessages":[],"fullName":"multiplyNumbers() tests Should have a return","location":null,"status":"pending","title":"Should have a return"},{"ancestorTitles":["multiplyNumbers() tests"],"failureMessages":[],"fullName":"multiplyNumbers() tests Should multiply 3 and 6 to make 18","location":null,"status":"pending","title":"Should multiply 3 and 6 to make 18"},{"ancestorTitles":["multiplyNumbers() tests"],"failureMessages":[],"fullName":"multiplyNumbers() tests Should multiply 12 and 6 to make 72","location":null,"status":"pending","title":"Should multiply 12 and 6 to make 72"},{"ancestorTitles":["checkIfNewHighScore() tests"],"failureMessages":[],"fullName":"checkIfNewHighScore() tests Should have a return","location":null,"status":"pending","title":"Should have a return"},{"ancestorTitles":["checkIfNewHighScore() tests"],"failureMessages":[],"fullName":"checkIfNewHighScore() tests Should tell me if I beat the high score","location":null,"status":"pending","title":"Should tell me if I beat the high score"},{"ancestorTitles":["checkIfNewHighScore() tests"],"failureMessages":[],"fullName":"checkIfNewHighScore() tests Should tell me if the scores are the same","location":null,"status":"pending","title":"Should tell me if the scores are the same"},{"ancestorTitles":["checkIfNewHighScore() tests"],"failureMessages":[],"fullName":"checkIfNewHighScore() tests Should tell me if I don't beat the high score","location":null,"status":"pending","title":"Should tell me if I don't beat the high score"},{"ancestorTitles":["celsiusToFahrenheit() tests"],"failureMessages":[],"fullName":"celsiusToFahrenheit() tests Should have a return","location":null,"status":"pending","title":"Should have a return"},{"ancestorTitles":["celsiusToFahrenheit() tests"],"failureMessages":[],"fullName":"celsiusToFahrenheit() tests Should return a string","location":null,"status":"pending","title":"Should return a string"},{"ancestorTitles":["celsiusToFahrenheit() tests"],"failureMessages":[],"fullName":"celsiusToFahrenheit() tests Should convert 15 C to 59 F","location":null,"status":"pending","title":"Should convert 15 C to 59 F"},{"ancestorTitles":["calculateLifeTimeSupply() tests"],"failureMessages":[],"fullName":"calculateLifeTimeSupply() tests Should have a return","location":null,"status":"pending","title":"Should have a return"},{"ancestorTitles":["calculateLifeTimeSupply() tests"],"failureMessages":[],"fullName":"calculateLifeTimeSupply() tests Should calculate the correct number if given 2 snickers, 25 years old and 90 years lifeExpectancy","location":null,"status":"pending","title":"Should calculate the correct number if given 2 snickers, 25 years old and 90 years lifeExpectancy"},{"ancestorTitles":["calculateLifeTimeSupply() tests"],"failureMessages":[],"fullName":"calculateLifeTimeSupply() tests Should calculate the correct number if given 1 snickers, 20 years old and 70 years lifeExpectancy","location":null,"status":"pending","title":"Should calculate the correct number if given 1 snickers, 20 years old and 70 years lifeExpectancy"},{"ancestorTitles":["getGrade() tests"],"failureMessages":[],"fullName":"getGrade() tests Should have a return","location":null,"status":"pending","title":"Should have a return"},{"ancestorTitles":["getGrade() tests"],"failureMessages":[],"fullName":"getGrade() tests Should return 'Score Unavailable' if given an incorrect score","location":null,"status":"pending","title":"Should return 'Score Unavailable' if given an incorrect score"},{"ancestorTitles":["getGrade() tests"],"failureMessages":[],"fullName":"getGrade() tests Should return 'A' for a score over 79","location":null,"status":"pending","title":"Should return 'A' for a score over 79"},{"ancestorTitles":["getGrade() tests"],"failureMessages":[],"fullName":"getGrade() tests Should return 'B' for a score between 79 - 70","location":null,"status":"pending","title":"Should return 'B' for a score between 79 - 70"},{"ancestorTitles":["getGrade() tests"],"failureMessages":[],"fullName":"getGrade() tests Should return 'C' for a score between 69 - 60","location":null,"status":"pending","title":"Should return 'C' for a score between 69 - 60"},{"ancestorTitles":["getGrade() tests"],"failureMessages":[],"fullName":"getGrade() tests Should return 'D' for a score between 59 - 50","location":null,"status":"pending","title":"Should return 'D' for a score between 59 - 50"},{"ancestorTitles":["getGrade() tests"],"failureMessages":[],"fullName":"getGrade() tests Should return 'E' for a score between 49 - 40","location":null,"status":"pending","title":"Should return 'E' for a score between 49 - 40"},{"ancestorTitles":["getGrade() tests"],"failureMessages":[],"fullName":"getGrade() tests Should return 'F' for a score between 39 - 0","location":null,"status":"pending","title":"Should return 'F' for a score between 39 - 0"},{"ancestorTitles":["calculateAreaOfCircle() tests"],"failureMessages":[],"fullName":"calculateAreaOfCircle() tests Should have a return","location":null,"status":"pending","title":"Should have a return"},{"ancestorTitles":["calculateAreaOfCircle() tests"],"failureMessages":[],"fullName":"calculateAreaOfCircle() tests Should return a number","location":null,"status":"pending","title":"Should return a number"},{"ancestorTitles":["calculateAreaOfCircle() tests"],"failureMessages":[],"fullName":"calculateAreaOfCircle() tests Should have the answer to two decimal places","location":null,"status":"pending","title":"Should have the answer to two decimal places"},{"ancestorTitles":["calculateAreaOfCircle() tests"],"failureMessages":[],"fullName":"calculateAreaOfCircle() tests Should return the correct number for a range of radii","location":null,"status":"pending","title":"Should return the correct number for a range of radii"},{"ancestorTitles":["getStudentSummary() tests"],"failureMessages":[],"fullName":"getStudentSummary() tests Should have a return","location":null,"status":"pending","title":"Should have a return"},{"ancestorTitles":["getStudentSummary() tests"],"failureMessages":[],"fullName":"getStudentSummary() tests Should return a string","location":null,"status":"pending","title":"Should return a string"},{"ancestorTitles":["getStudentSummary() tests"],"failureMessages":[],"fullName":"getStudentSummary() tests Should return 'My apologies NAME, there's been an error in processing your grade.' if a grade cannot be found","location":null,"status":"pending","title":"Should return 'My apologies NAME, there's been an error in processing your grade.' if a grade cannot be found"},{"ancestorTitles":["getStudentSummary() tests"],"failureMessages":[],"fullName":"getStudentSummary() tests Should return the correct summary for a score of over 79","location":null,"status":"pending","title":"Should return the correct summary for a score of over 79"},{"ancestorTitles":["getStudentSummary() tests"],"failureMessages":[],"fullName":"getStudentSummary() tests Should return the correct summary for a score betweem 79 - 70","location":null,"status":"pending","title":"Should return the correct summary for a score betweem 79 - 70"},{"ancestorTitles":["getStudentSummary() tests"],"failureMessages":[],"fullName":"getStudentSummary() tests Should return the correct summary for a score betweem 69 - 60","location":null,"status":"pending","title":"Should return the correct summary for a score betweem 69 - 60"},{"ancestorTitles":["getStudentSummary() tests"],"failureMessages":[],"fullName":"getStudentSummary() tests Should return the correct summary for a score betweem 59 - 50","location":null,"status":"pending","title":"Should return the correct summary for a score betweem 59 - 50"},{"ancestorTitles":["getStudentSummary() tests"],"failureMessages":[],"fullName":"getStudentSummary() tests Should return the correct summary for a score betweem 49 - 40","location":null,"status":"pending","title":"Should return the correct summary for a score betweem 49 - 40"},{"ancestorTitles":["getStudentSummary() tests"],"failureMessages":[],"fullName":"getStudentSummary() tests Should return the correct summary for a score betweem 39 - 0","location":null,"status":"pending","title":"Should return the correct summary for a score betweem 39 - 0"}],"endTime":1662012026151,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcreateFullName() tests › Should have a return\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeDefined\u001b[2m()\u001b[22m\n\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 | \u001b[39mdescribe(\u001b[32m\"createFullName() tests\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 16 | \u001b[39m  it(\u001b[32m\"Should have a return\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 17 | \u001b[39m    expect(createFullName(\u001b[32m\"John\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"Smith\"\u001b[39m))\u001b[33m.\u001b[39mtoBeDefined()\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 20 | \u001b[39m  it(\u001b[32m\"Should work with basic inputs\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js2-functions-intro/js2.test.js\u001b[39m\u001b[0m\u001b[2m:17:45)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcreateFullName() tests › Should work with basic inputs\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"John Smith\"\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 20 | \u001b[39m  it(\u001b[32m\"Should work with basic inputs\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 | \u001b[39m    expect(createFullName(\u001b[32m\"John\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"Smith\"\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[32m\"John Smith\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 22 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 23 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 24 | \u001b[39m  it(\u001b[32m\"Should work with arbritrary inputs\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js2-functions-intro/js2.test.js\u001b[39m\u001b[0m\u001b[2m:21:45)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcreateFullName() tests › Should work with arbritrary inputs\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"abc def\"\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 23 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 24 | \u001b[39m  it(\u001b[32m\"Should work with arbritrary inputs\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 25 | \u001b[39m    expect(createFullName(\u001b[32m\"abc\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"def\"\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[32m\"abc def\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                         \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 26 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 27 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 28 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js2-functions-intro/js2.test.js\u001b[39m\u001b[0m\u001b[2m:25:42)\u001b[22m\u001b[2m\u001b[22m\n","name":"E:\\Work\\_Nology\\final project\\js-challenges\\src\\js2-functions-intro\\js2.test.js","startTime":1662012024166,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Testing Coordinate class"],"failureMessages":[],"fullName":"Testing Coordinate class Should be an object","location":null,"status":"passed","title":"Should be an object"},{"ancestorTitles":["Testing Coordinate class"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveProperty\u001b[2m(\u001b[22m\u001b[32mpath\u001b[39m\u001b[2m)\u001b[22m\n\nExpected path: \u001b[32m\"xCoord\"\u001b[39m\nReceived path: \u001b[31m[]\u001b[39m\n\nReceived value: \u001b[31m{}\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js7-classes\\js7.test.js:19:22)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"Testing Coordinate class Should have xCoord key","location":null,"status":"failed","title":"Should have xCoord key"},{"ancestorTitles":["Testing Coordinate class"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveProperty\u001b[2m(\u001b[22m\u001b[32mpath\u001b[39m\u001b[2m)\u001b[22m\n\nExpected path: \u001b[32m\"yCoord\"\u001b[39m\nReceived path: \u001b[31m[]\u001b[39m\n\nReceived value: \u001b[31m{}\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js7-classes\\js7.test.js:24:22)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"Testing Coordinate class Should have yCoord key","location":null,"status":"failed","title":"Should have yCoord key"},{"ancestorTitles":["Testing Coordinate class"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m5\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js7-classes\\js7.test.js:29:29)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"Testing Coordinate class Should have the correct value for xCoord key","location":null,"status":"failed","title":"Should have the correct value for xCoord key"},{"ancestorTitles":["Testing Coordinate class"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m10\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js7-classes\\js7.test.js:34:29)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"Testing Coordinate class Should have the correct value for yCoord key","location":null,"status":"failed","title":"Should have the correct value for yCoord key"},{"ancestorTitles":["Testing Alert class"],"failureMessages":[],"fullName":"Testing Alert class Should be an object","location":null,"status":"pending","title":"Should be an object"},{"ancestorTitles":["Testing Alert class"],"failureMessages":[],"fullName":"Testing Alert class Should have a message key","location":null,"status":"pending","title":"Should have a message key"},{"ancestorTitles":["Testing Alert class"],"failureMessages":[],"fullName":"Testing Alert class Should have a printMessage function","location":null,"status":"pending","title":"Should have a printMessage function"},{"ancestorTitles":["Testing Alert class"],"failureMessages":[],"fullName":"Testing Alert class Should return a string when the printMessage method is called","location":null,"status":"pending","title":"Should return a string when the printMessage method is called"},{"ancestorTitles":["Testing Alert class"],"failureMessages":[],"fullName":"Testing Alert class Should return a correctly formatted string when the printMessage method is called","location":null,"status":"pending","title":"Should return a correctly formatted string when the printMessage method is called"},{"ancestorTitles":["Testing Alert class"],"failureMessages":[],"fullName":"Testing Alert class Should not alter message key after method is called","location":null,"status":"pending","title":"Should not alter message key after method is called"},{"ancestorTitles":["Testing Loader class"],"failureMessages":[],"fullName":"Testing Loader class Should be an object","location":null,"status":"pending","title":"Should be an object"},{"ancestorTitles":["Testing Loader class"],"failureMessages":[],"fullName":"Testing Loader class Should have a htmlRef key","location":null,"status":"pending","title":"Should have a htmlRef key"},{"ancestorTitles":["Testing Loader class"],"failureMessages":[],"fullName":"Testing Loader class Should have a displayLoader and removeLoader methods","location":null,"status":"pending","title":"Should have a displayLoader and removeLoader methods"},{"ancestorTitles":["Testing Loader class"],"failureMessages":[],"fullName":"Testing Loader class Should add the correct html to the html reference when displayLoader() is called","location":null,"status":"pending","title":"Should add the correct html to the html reference when displayLoader() is called"},{"ancestorTitles":["Testing Loader class"],"failureMessages":[],"fullName":"Testing Loader class Should add the correct html to the html reference when displayLoader() is called multiple times","location":null,"status":"pending","title":"Should add the correct html to the html reference when displayLoader() is called multiple times"},{"ancestorTitles":["Testing Loader class"],"failureMessages":[],"fullName":"Testing Loader class Should set innerHTML of html reference to an empty string removeLoader() is called","location":null,"status":"pending","title":"Should set innerHTML of html reference to an empty string removeLoader() is called"},{"ancestorTitles":["Testing Loader class"],"failureMessages":[],"fullName":"Testing Loader class Should remove html from the html reference when displayLoader() and then removeLoader() is called","location":null,"status":"pending","title":"Should remove html from the html reference when displayLoader() and then removeLoader() is called"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should be an object","location":null,"status":"pending","title":"Should be an object"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should have a count key","location":null,"status":"pending","title":"Should have a count key"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should have correct count when initialised","location":null,"status":"pending","title":"Should have correct count when initialised"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should have a increment function","location":null,"status":"pending","title":"Should have a increment function"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should return a number when the increment method is called","location":null,"status":"pending","title":"Should return a number when the increment method is called"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should increment count by 1","location":null,"status":"pending","title":"Should increment count by 1"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should increment count by 1 100 times","location":null,"status":"pending","title":"Should increment count by 1 100 times"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should have a decrement function","location":null,"status":"pending","title":"Should have a decrement function"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should return a number when the decrement method is called","location":null,"status":"pending","title":"Should return a number when the decrement method is called"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should decrement count by 1","location":null,"status":"pending","title":"Should decrement count by 1"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should decrement count by 1 100 times","location":null,"status":"pending","title":"Should decrement count by 1 100 times"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should not decrement below 0","location":null,"status":"pending","title":"Should not decrement below 0"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should be an object","location":null,"status":"pending","title":"Should be an object"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should have a engineIsRunning key","location":null,"status":"pending","title":"Should have a engineIsRunning key"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should set engineIsRunning to false by default","location":null,"status":"pending","title":"Should set engineIsRunning to false by default"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should have a startEngine function","location":null,"status":"pending","title":"Should have a startEngine function"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should return a string when the startEngine method is called","location":null,"status":"pending","title":"Should return a string when the startEngine method is called"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should return the correct string when startEngine() is called and engineIsRunning is false","location":null,"status":"pending","title":"Should return the correct string when startEngine() is called and engineIsRunning is false"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should set engineIsRunning to true after startEngine() has been called","location":null,"status":"pending","title":"Should set engineIsRunning to true after startEngine() has been called"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should return the correct string when startEngine() is called and engineIsRunning is true","location":null,"status":"pending","title":"Should return the correct string when startEngine() is called and engineIsRunning is true"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should have a stopEngine function","location":null,"status":"pending","title":"Should have a stopEngine function"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should return a string when the stopEngine method is called","location":null,"status":"pending","title":"Should return a string when the stopEngine method is called"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should return the correct string when stopEngine() is called and engineIsRunning is false","location":null,"status":"pending","title":"Should return the correct string when stopEngine() is called and engineIsRunning is false"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should return the correct string when stopEngine() is called and engineIsRunning is true","location":null,"status":"pending","title":"Should return the correct string when stopEngine() is called and engineIsRunning is true"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should set engineIsRunning to false after startEngine() and stopEngine() have been called","location":null,"status":"pending","title":"Should set engineIsRunning to false after startEngine() and stopEngine() have been called"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should be an object","location":null,"status":"pending","title":"Should be an object"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should have htmlRef, title and message keys","location":null,"status":"pending","title":"Should have htmlRef, title and message keys"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should have correct values assigned to the keys","location":null,"status":"pending","title":"Should have correct values assigned to the keys"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should have renderHtml and toggleModalfunctions","location":null,"status":"pending","title":"Should have renderHtml and toggleModalfunctions"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should update the innerHTML of the htmlRefernce after renderHtml() has been called","location":null,"status":"pending","title":"Should update the innerHTML of the htmlRefernce after renderHtml() has been called"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should update the innerHTML of the htmlRefernce dynamically after renderHtml() has been called","location":null,"status":"pending","title":"Should update the innerHTML of the htmlRefernce dynamically after renderHtml() has been called"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should update the classList of the htmlRefernce - remove hide","location":null,"status":"pending","title":"Should update the classList of the htmlRefernce - remove hide"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should update the classList of the htmlRefernce - add hide","location":null,"status":"pending","title":"Should update the classList of the htmlRefernce - add hide"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should update the classList with the string of hide","location":null,"status":"pending","title":"Should update the classList with the string of hide"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should be an object","location":null,"status":"pending","title":"Should be an object"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should have a _shelfId and a _booksOnShelf key","location":null,"status":"pending","title":"Should have a _shelfId and a _booksOnShelf key"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should set _booksOnShelf to [] by default","location":null,"status":"pending","title":"Should set _booksOnShelf to [] by default"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should have the getters and setters","location":null,"status":"pending","title":"Should have the getters and setters"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should return the _booksOnShelf written as a getter","location":null,"status":"pending","title":"Should return the _booksOnShelf written as a getter"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should update the _booksOnShelf written as a setter","location":null,"status":"pending","title":"Should update the _booksOnShelf written as a setter"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should return the latestBook written as a getter","location":null,"status":"pending","title":"Should return the latestBook written as a getter"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should update using a setter and return the latestBook written as a getter","location":null,"status":"pending","title":"Should update using a setter and return the latestBook written as a getter"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should Error if latestBook is attempted to be assigned","location":null,"status":"pending","title":"Should Error if latestBook is attempted to be assigned"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should add a new book to the bookshelf written as a setter","location":null,"status":"pending","title":"Should add a new book to the bookshelf written as a setter"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should handle multiple books being added to the shelf","location":null,"status":"pending","title":"Should handle multiple books being added to the shelf"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should match last item when multiple books have been added","location":null,"status":"pending","title":"Should match last item when multiple books have been added"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should add a new book to the END of bookshelf written as a setter","location":null,"status":"pending","title":"Should add a new book to the END of bookshelf written as a setter"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be an object","location":null,"status":"pending","title":"Should be an object"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should have a name and email key","location":null,"status":"pending","title":"Should have a name and email key"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should have the correct name and email value","location":null,"status":"pending","title":"Should have the correct name and email value"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should have a private _balance key","location":null,"status":"pending","title":"Should have a private _balance key"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should have the correct value on the _balance key","location":null,"status":"pending","title":"Should have the correct value on the _balance key"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should set _balance key to 0 by default","location":null,"status":"pending","title":"Should set _balance key to 0 by default"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should have the balance getter","location":null,"status":"pending","title":"Should have the balance getter"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should return the _balance written as a getter","location":null,"status":"pending","title":"Should return the _balance written as a getter"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should return a new _balance written as a getter","location":null,"status":"pending","title":"Should return a new _balance written as a getter"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should Error if balance is attempted to be assigned","location":null,"status":"pending","title":"Should Error if balance is attempted to be assigned"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should have a deposit method","location":null,"status":"pending","title":"Should have a deposit method"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make a valid deposit (number) should recieve the updated balance when deposit() is called","location":null,"status":"pending","title":"Should be able to make a valid deposit (number) should recieve the updated balance when deposit() is called"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make a valid deposit ('number') should recieve the updated balance when deposit() is called","location":null,"status":"pending","title":"Should be able to make a valid deposit ('number') should recieve the updated balance when deposit() is called"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should NOT be able to make a INVALID deposit should recieve formatted string when deposit() is called","location":null,"status":"pending","title":"Should NOT be able to make a INVALID deposit should recieve formatted string when deposit() is called"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make a valid deposit (number) and check the balance afterwards","location":null,"status":"pending","title":"Should be able to make a valid deposit (number) and check the balance afterwards"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make multiple deposits and check the balance afterwards","location":null,"status":"pending","title":"Should be able to make multiple deposits and check the balance afterwards"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should have a withdraw method","location":null,"status":"pending","title":"Should have a withdraw method"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make a valid withdrawal (number) should recieve the updated balance when withdraw() is called","location":null,"status":"pending","title":"Should be able to make a valid withdrawal (number) should recieve the updated balance when withdraw() is called"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make a valid withdrawal ('number') should recieve the updated balance when withdraw() is called","location":null,"status":"pending","title":"Should be able to make a valid withdrawal ('number') should recieve the updated balance when withdraw() is called"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make a valid withdraw (number) and check the balance afterwards","location":null,"status":"pending","title":"Should be able to make a valid withdraw (number) and check the balance afterwards"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should NOT be able to make a INVALID withdrawal should recieve formatted string","location":null,"status":"pending","title":"Should NOT be able to make a INVALID withdrawal should recieve formatted string"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should NOT be able to make withdraw more then the current balance","location":null,"status":"pending","title":"Should NOT be able to make withdraw more then the current balance"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should NOT change the balance after INVALID withdrawals","location":null,"status":"pending","title":"Should NOT change the balance after INVALID withdrawals"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should NOT go below zero","location":null,"status":"pending","title":"Should NOT go below zero"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make multiple withdrawals and check the balance afterwards","location":null,"status":"pending","title":"Should be able to make multiple withdrawals and check the balance afterwards"}],"endTime":1662012026159,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mTesting Coordinate class › Should have xCoord key\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveProperty\u001b[2m(\u001b[22m\u001b[32mpath\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected path: \u001b[32m\"xCoord\"\u001b[39m\n    Received path: \u001b[31m[]\u001b[39m\n\n    Received value: \u001b[31m{}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 | \u001b[39m  it(\u001b[32m\"Should have xCoord key\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 19 | \u001b[39m    expect(coordOne)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m\"xCoord\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 20 | \u001b[39m    expect(coordTwo)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m\"xCoord\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 21 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 22 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js7-classes/js7.test.js\u001b[39m\u001b[0m\u001b[2m:19:22)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mTesting Coordinate class › Should have yCoord key\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveProperty\u001b[2m(\u001b[22m\u001b[32mpath\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected path: \u001b[32m\"yCoord\"\u001b[39m\n    Received path: \u001b[31m[]\u001b[39m\n\n    Received value: \u001b[31m{}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 22 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 23 | \u001b[39m  it(\u001b[32m\"Should have yCoord key\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 24 | \u001b[39m    expect(coordOne)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m\"yCoord\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 25 | \u001b[39m    expect(coordTwo)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m\"yCoord\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 26 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 27 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js7-classes/js7.test.js\u001b[39m\u001b[0m\u001b[2m:24:22)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mTesting Coordinate class › Should have the correct value for xCoord key\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m5\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 27 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 28 | \u001b[39m  it(\u001b[32m\"Should have the correct value for xCoord key\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 29 | \u001b[39m    expect(coordOne\u001b[33m.\u001b[39mxCoord)\u001b[33m.\u001b[39mtoBe(\u001b[35m5\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 30 | \u001b[39m    expect(coordTwo\u001b[33m.\u001b[39mxCoord)\u001b[33m.\u001b[39mtoBe(\u001b[35m45\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 32 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js7-classes/js7.test.js\u001b[39m\u001b[0m\u001b[2m:29:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mTesting Coordinate class › Should have the correct value for yCoord key\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m10\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 32 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 | \u001b[39m  it(\u001b[32m\"Should have the correct value for yCoord key\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 34 | \u001b[39m    expect(coordOne\u001b[33m.\u001b[39myCoord)\u001b[33m.\u001b[39mtoBe(\u001b[35m10\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 35 | \u001b[39m    expect(coordTwo\u001b[33m.\u001b[39myCoord)\u001b[33m.\u001b[39mtoBe(\u001b[35m17\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js7-classes/js7.test.js\u001b[39m\u001b[0m\u001b[2m:34:29)\u001b[22m\u001b[2m\u001b[22m\n","name":"E:\\Work\\_Nology\\final project\\js-challenges\\src\\js7-classes\\js7.test.js","startTime":1662012024146,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1662012026429,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    Your test suite must contain at least one test.\n\n      \u001b[2mat onResult (\u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:175:18)\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:304:17\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/emittery/index.js\u001b[2m:260:13\u001b[22m\n          at Array.map (<anonymous>)\n      \u001b[2mat Emittery.Typed.emit (\u001b[22mnode_modules/emittery/index.js\u001b[2m:258:23)\u001b[22m\n","name":"E:\\Work\\_Nology\\final project\\js-challenges\\src\\js11-unit-testing\\challenge.test.js","startTime":1662012026429,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Testing createRecipeString()"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeDefined\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js3-arrays-and-for-loops\\js3.test.js:28:45)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"Testing createRecipeString() Should be defined","location":null,"status":"failed","title":"Should be defined"},{"ancestorTitles":["Testing createRecipeString()"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"string\"\u001b[39m\nReceived: \u001b[31m\"undefined\"\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js3-arrays-and-for-loops\\js3.test.js:32:52)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"Testing createRecipeString() Should return a String","location":null,"status":"failed","title":"Should return a String"},{"ancestorTitles":["Testing createRecipeString()"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m\"Bacon+Lettuce+Tomato\"\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js3-arrays-and-for-loops\\js3.test.js:37:45)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"Testing createRecipeString() Should handle multiple inputs","location":null,"status":"failed","title":"Should handle multiple inputs"},{"ancestorTitles":["Testing createRecipeString()"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"hat\"\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js3-arrays-and-for-loops\\js3.test.js:42:41)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"Testing createRecipeString() Should handle a single item","location":null,"status":"failed","title":"Should handle a single item"},{"ancestorTitles":["Testing getFirstAndLastItems()"],"failureMessages":[],"fullName":"Testing getFirstAndLastItems() Should be defined","location":null,"status":"pending","title":"Should be defined"},{"ancestorTitles":["Testing getFirstAndLastItems()"],"failureMessages":[],"fullName":"Testing getFirstAndLastItems() Should return an Array ","location":null,"status":"pending","title":"Should return an Array "},{"ancestorTitles":["Testing getFirstAndLastItems()"],"failureMessages":[],"fullName":"Testing getFirstAndLastItems() Should handle multiple inputs","location":null,"status":"pending","title":"Should handle multiple inputs"},{"ancestorTitles":["Testing totalScores()"],"failureMessages":[],"fullName":"Testing totalScores() Should be defined","location":null,"status":"pending","title":"Should be defined"},{"ancestorTitles":["Testing totalScores()"],"failureMessages":[],"fullName":"Testing totalScores() Should return a Number","location":null,"status":"pending","title":"Should return a Number"},{"ancestorTitles":["Testing totalScores()"],"failureMessages":[],"fullName":"Testing totalScores() Should handle single input","location":null,"status":"pending","title":"Should handle single input"},{"ancestorTitles":["Testing totalScores()"],"failureMessages":[],"fullName":"Testing totalScores() Should handle multiple inputs","location":null,"status":"pending","title":"Should handle multiple inputs"},{"ancestorTitles":["Testing totalRange()"],"failureMessages":[],"fullName":"Testing totalRange() Should be defined","location":null,"status":"pending","title":"Should be defined"},{"ancestorTitles":["Testing totalRange()"],"failureMessages":[],"fullName":"Testing totalRange() Should return a Number ","location":null,"status":"pending","title":"Should return a Number "},{"ancestorTitles":["Testing totalRange()"],"failureMessages":[],"fullName":"Testing totalRange() Should Total up the range of numbers","location":null,"status":"pending","title":"Should Total up the range of numbers"},{"ancestorTitles":["Testing totalRange()"],"failureMessages":[],"fullName":"Testing totalRange() Should Total larger numbers","location":null,"status":"pending","title":"Should Total larger numbers"},{"ancestorTitles":["Testing moveFirstAndLastItems()"],"failureMessages":[],"fullName":"Testing moveFirstAndLastItems() Should be defined","location":null,"status":"pending","title":"Should be defined"},{"ancestorTitles":["Testing moveFirstAndLastItems()"],"failureMessages":[],"fullName":"Testing moveFirstAndLastItems() Should return an Array ","location":null,"status":"pending","title":"Should return an Array "},{"ancestorTitles":["Testing moveFirstAndLastItems()"],"failureMessages":[],"fullName":"Testing moveFirstAndLastItems() Should handle multiple inputs","location":null,"status":"pending","title":"Should handle multiple inputs"},{"ancestorTitles":["Testing removeEvenNumbers()"],"failureMessages":[],"fullName":"Testing removeEvenNumbers() Should be defined","location":null,"status":"pending","title":"Should be defined"},{"ancestorTitles":["Testing removeEvenNumbers()"],"failureMessages":[],"fullName":"Testing removeEvenNumbers() Should return an Array ","location":null,"status":"pending","title":"Should return an Array "},{"ancestorTitles":["Testing removeEvenNumbers()"],"failureMessages":[],"fullName":"Testing removeEvenNumbers() Should remove even numbers from array","location":null,"status":"pending","title":"Should remove even numbers from array"},{"ancestorTitles":["Testing removeEvenNumbers()"],"failureMessages":[],"fullName":"Testing removeEvenNumbers() Should remove even numbers from a small array","location":null,"status":"pending","title":"Should remove even numbers from a small array"},{"ancestorTitles":["Testing removeEvenNumbers()"],"failureMessages":[],"fullName":"Testing removeEvenNumbers() Should remove even numbers from a large array","location":null,"status":"pending","title":"Should remove even numbers from a large array"},{"ancestorTitles":["Testing removeEvenNumbers()"],"failureMessages":[],"fullName":"Testing removeEvenNumbers() Should return a new array","location":null,"status":"pending","title":"Should return a new array"},{"ancestorTitles":["Testing generateAverage()"],"failureMessages":[],"fullName":"Testing generateAverage() Should be defined","location":null,"status":"pending","title":"Should be defined"},{"ancestorTitles":["Testing generateAverage()"],"failureMessages":[],"fullName":"Testing generateAverage() Should return a Number","location":null,"status":"pending","title":"Should return a Number"},{"ancestorTitles":["Testing generateAverage()"],"failureMessages":[],"fullName":"Testing generateAverage() Should calculate the average of different numbers","location":null,"status":"pending","title":"Should calculate the average of different numbers"},{"ancestorTitles":["Testing generateAverage()"],"failureMessages":[],"fullName":"Testing generateAverage() Should calculate the average of same numbers","location":null,"status":"pending","title":"Should calculate the average of same numbers"},{"ancestorTitles":["Testing generateAverage()"],"failureMessages":[],"fullName":"Testing generateAverage() Should handle an empty array","location":null,"status":"pending","title":"Should handle an empty array"},{"ancestorTitles":["Testing reverseOrder()"],"failureMessages":[],"fullName":"Testing reverseOrder() Should be defined","location":null,"status":"pending","title":"Should be defined"},{"ancestorTitles":["Testing reverseOrder()"],"failureMessages":[],"fullName":"Testing reverseOrder() Should return an Array","location":null,"status":"pending","title":"Should return an Array"},{"ancestorTitles":["Testing reverseOrder()"],"failureMessages":[],"fullName":"Testing reverseOrder() Should not change a single item array","location":null,"status":"pending","title":"Should not change a single item array"},{"ancestorTitles":["Testing reverseOrder()"],"failureMessages":[],"fullName":"Testing reverseOrder() Should return multiple item Array Reversed","location":null,"status":"pending","title":"Should return multiple item Array Reversed"},{"ancestorTitles":["Testing reverseOrder()"],"failureMessages":[],"fullName":"Testing reverseOrder() Should return a new array","location":null,"status":"pending","title":"Should return a new array"},{"ancestorTitles":["Testing generateHighscores()"],"failureMessages":[],"fullName":"Testing generateHighscores() Should be defined","location":null,"status":"pending","title":"Should be defined"},{"ancestorTitles":["Testing generateHighscores()"],"failureMessages":[],"fullName":"Testing generateHighscores() Should return an Array with correct params","location":null,"status":"pending","title":"Should return an Array with correct params"},{"ancestorTitles":["Testing generateHighscores()"],"failureMessages":[],"fullName":"Testing generateHighscores() Should return String with incorrect params","location":null,"status":"pending","title":"Should return String with incorrect params"},{"ancestorTitles":["Testing generateHighscores()"],"failureMessages":[],"fullName":"Testing generateHighscores() Should format arrays with valid parameters","location":null,"status":"pending","title":"Should format arrays with valid parameters"},{"ancestorTitles":["Testing generateHighscores()"],"failureMessages":[],"fullName":"Testing generateHighscores() Should not lose any players","location":null,"status":"pending","title":"Should not lose any players"},{"ancestorTitles":["Testing generateHighscores()"],"failureMessages":[],"fullName":"Testing generateHighscores() Should catch invalid parameters.","location":null,"status":"pending","title":"Should catch invalid parameters."},{"ancestorTitles":["Testing generateHighscores()"],"failureMessages":[],"fullName":"Testing generateHighscores() Should return a new Array","location":null,"status":"pending","title":"Should return a new Array"},{"ancestorTitles":["Testing encryptString()"],"failureMessages":[],"fullName":"Testing encryptString() Should NOT return undefined","location":null,"status":"pending","title":"Should NOT return undefined"},{"ancestorTitles":["Testing encryptString()"],"failureMessages":[],"fullName":"Testing encryptString() Should return a String","location":null,"status":"pending","title":"Should return a String"},{"ancestorTitles":["Testing encryptString()"],"failureMessages":[],"fullName":"Testing encryptString() Should NOT encrypt three letters","location":null,"status":"pending","title":"Should NOT encrypt three letters"},{"ancestorTitles":["Testing encryptString()"],"failureMessages":[],"fullName":"Testing encryptString() Should encrypt after three plus letters","location":null,"status":"pending","title":"Should encrypt after three plus letters"},{"ancestorTitles":["Testing encryptString()"],"failureMessages":[],"fullName":"Testing encryptString() Should encrypt large words","location":null,"status":"pending","title":"Should encrypt large words"},{"ancestorTitles":["Testing encryptString()"],"failureMessages":[],"fullName":"Testing encryptString() Should keep spaces between words","location":null,"status":"pending","title":"Should keep spaces between words"},{"ancestorTitles":["Testing encryptString()"],"failureMessages":[],"fullName":"Testing encryptString() Should handle empty input","location":null,"status":"pending","title":"Should handle empty input"}],"endTime":1662012026195,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mTesting createRecipeString() › Should be defined\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeDefined\u001b[2m()\u001b[22m\n\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 26 | \u001b[39mdescribe(\u001b[32m\"Testing createRecipeString()\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 27 | \u001b[39m  it(\u001b[32m\"Should be defined\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 28 | \u001b[39m    expect(createRecipeString(ingredients))\u001b[33m.\u001b[39mtoBeDefined()\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 29 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 30 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 | \u001b[39m  it(\u001b[32m\"Should return a String\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js3-arrays-and-for-loops/js3.test.js\u001b[39m\u001b[0m\u001b[2m:28:45)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mTesting createRecipeString() › Should return a String\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"string\"\u001b[39m\n    Received: \u001b[31m\"undefined\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 30 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 | \u001b[39m  it(\u001b[32m\"Should return a String\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 32 | \u001b[39m    expect(\u001b[36mtypeof\u001b[39m createRecipeString(ingredients))\u001b[33m.\u001b[39mtoBe(\u001b[32m\"string\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 | \u001b[39m    expect(\u001b[36mtypeof\u001b[39m createRecipeString([\u001b[32m\"hat\"\u001b[39m]))\u001b[33m.\u001b[39mtoBe(\u001b[32m\"string\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 35 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js3-arrays-and-for-loops/js3.test.js\u001b[39m\u001b[0m\u001b[2m:32:52)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mTesting createRecipeString() › Should handle multiple inputs\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m\"Bacon+Lettuce+Tomato\"\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 35 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m  it(\u001b[32m\"Should handle multiple inputs\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 37 | \u001b[39m    expect(createRecipeString(ingredients))\u001b[33m.\u001b[39mtoEqual(ingredientsString)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 | \u001b[39m    expect(createRecipeString(items))\u001b[33m.\u001b[39mtoEqual(itemString)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 39 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 40 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js3-arrays-and-for-loops/js3.test.js\u001b[39m\u001b[0m\u001b[2m:37:45)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mTesting createRecipeString() › Should handle a single item\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"hat\"\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 40 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 41 | \u001b[39m  it(\u001b[32m\"Should handle a single item\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 42 | \u001b[39m    expect(createRecipeString([\u001b[32m\"hat\"\u001b[39m]))\u001b[33m.\u001b[39mtoBe(\u001b[32m\"hat\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 43 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 44 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 45 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js3-arrays-and-for-loops/js3.test.js\u001b[39m\u001b[0m\u001b[2m:42:41)\u001b[22m\u001b[2m\u001b[22m\n","name":"E:\\Work\\_Nology\\final project\\js-challenges\\src\\js3-arrays-and-for-loops\\js3.test.js","startTime":1662012024151,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"createFullName() tests","location":null,"status":"passed","title":"createFullName() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"findLargestNumber() tests","location":null,"status":"passed","title":"findLargestNumber() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"addNumbers() tests","location":null,"status":"passed","title":"addNumbers() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"findLengthOfPassword() tests","location":null,"status":"passed","title":"findLengthOfPassword() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"findType() tests","location":null,"status":"passed","title":"findType() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getIsValidOnNameTag() tests","location":null,"status":"passed","title":"getIsValidOnNameTag() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"convertStringToNumber() tests","location":null,"status":"passed","title":"convertStringToNumber() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getHasUppercaseLetters() tests","location":null,"status":"passed","title":"getHasUppercaseLetters() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"convertPascalCaseToSnakeCase() tests","location":null,"status":"passed","title":"convertPascalCaseToSnakeCase() tests"}],"endTime":1662012026214,"message":"","name":"E:\\Work\\_Nology\\final project\\js-challenges\\src\\js1-types-and-control-flow\\js1.test.js","startTime":1662012024224,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getFurniturePrice() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m6\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js6-objects\\js6.test.js:20:38)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"getFurniturePrice() tests Should return the correct price","location":null,"status":"failed","title":"Should return the correct price"},{"ancestorTitles":["addFurnitureStorLocation() tests"],"failureMessages":[],"fullName":"addFurnitureStorLocation() tests Should return an object","location":null,"status":"pending","title":"Should return an object"},{"ancestorTitles":["addFurnitureStorLocation() tests"],"failureMessages":[],"fullName":"addFurnitureStorLocation() tests Should add a property of location","location":null,"status":"pending","title":"Should add a property of location"},{"ancestorTitles":["addFurnitureStorLocation() tests"],"failureMessages":[],"fullName":"addFurnitureStorLocation() tests Should still have all of the old properties","location":null,"status":"pending","title":"Should still have all of the old properties"},{"ancestorTitles":["addFurnitureStorLocation() tests"],"failureMessages":[],"fullName":"addFurnitureStorLocation() tests Should exactly match given object","location":null,"status":"pending","title":"Should exactly match given object"},{"ancestorTitles":["makeSpaceship() tests"],"failureMessages":[],"fullName":"makeSpaceship() tests Should return an object","location":null,"status":"pending","title":"Should return an object"},{"ancestorTitles":["makeSpaceship() tests"],"failureMessages":[],"fullName":"makeSpaceship() tests Should create an object with the provided arguments as values","location":null,"status":"pending","title":"Should create an object with the provided arguments as values"},{"ancestorTitles":["setUserName() tests"],"failureMessages":[],"fullName":"setUserName() tests Should return and object","location":null,"status":"pending","title":"Should return and object"},{"ancestorTitles":["setUserName() tests"],"failureMessages":[],"fullName":"setUserName() tests Shouldn't change the username if one already exists","location":null,"status":"pending","title":"Shouldn't change the username if one already exists"},{"ancestorTitles":["setUserName() tests"],"failureMessages":[],"fullName":"setUserName() tests Should change the username if none exists","location":null,"status":"pending","title":"Should change the username if none exists"},{"ancestorTitles":["splitFullNameToFirstAndLast() tests"],"failureMessages":[],"fullName":"splitFullNameToFirstAndLast() tests Should split up basic names","location":null,"status":"pending","title":"Should split up basic names"},{"ancestorTitles":["accessGivenKey() tests"],"failureMessages":[],"fullName":"accessGivenKey() tests Should access the eyeColour property","location":null,"status":"pending","title":"Should access the eyeColour property"},{"ancestorTitles":["accessGivenKey() tests"],"failureMessages":[],"fullName":"accessGivenKey() tests Should access the height property","location":null,"status":"pending","title":"Should access the height property"},{"ancestorTitles":["accessGivenKey() tests"],"failureMessages":[],"fullName":"accessGivenKey() tests Should access the name property","location":null,"status":"pending","title":"Should access the name property"},{"ancestorTitles":["accessGivenKey() tests"],"failureMessages":[],"fullName":"accessGivenKey() tests Should access the likesIceCream property","location":null,"status":"pending","title":"Should access the likesIceCream property"},{"ancestorTitles":["getUserAddress() tests"],"failureMessages":[],"fullName":"getUserAddress() tests Should be able to get the address from the user object","location":null,"status":"pending","title":"Should be able to get the address from the user object"},{"ancestorTitles":["setSafeAllergens() tests"],"failureMessages":[],"fullName":"setSafeAllergens() tests Should include all allergens as safe if none present on the object allergies array","location":null,"status":"pending","title":"Should include all allergens as safe if none present on the object allergies array"},{"ancestorTitles":["setSafeAllergens() tests"],"failureMessages":[],"fullName":"setSafeAllergens() tests Should include no allergens if all are found on the customer object","location":null,"status":"pending","title":"Should include no allergens if all are found on the customer object"},{"ancestorTitles":["setSafeAllergens() tests"],"failureMessages":[],"fullName":"setSafeAllergens() tests Should include some allergens if some are present on customer allergen list","location":null,"status":"pending","title":"Should include some allergens if some are present on customer allergen list"},{"ancestorTitles":["mergeFurniture() tests"],"failureMessages":[],"fullName":"mergeFurniture() tests Should return an object which has a combination of both keys","location":null,"status":"pending","title":"Should return an object which has a combination of both keys"},{"ancestorTitles":["mergeFurniture() tests"],"failureMessages":[],"fullName":"mergeFurniture() tests Should not modify the original object","location":null,"status":"pending","title":"Should not modify the original object"},{"ancestorTitles":["mergeFurniture() tests"],"failureMessages":[],"fullName":"mergeFurniture() tests Should return an object which has the exact key value pairs of both objects","location":null,"status":"pending","title":"Should return an object which has the exact key value pairs of both objects"}],"endTime":1662012026223,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mgetFurniturePrice() tests › Should return the correct price\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m6\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 | \u001b[39m  it(\u001b[32m\"Should return the correct price\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 20 | \u001b[39m    expect(getFurniturePrice(table))\u001b[33m.\u001b[39mtoBe(\u001b[35m6\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 21 | \u001b[39m    expect(getFurniturePrice(cabinet))\u001b[33m.\u001b[39mtoBe(\u001b[35m55\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 22 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 23 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js6-objects/js6.test.js\u001b[39m\u001b[0m\u001b[2m:20:38)\u001b[22m\u001b[2m\u001b[22m\n","name":"E:\\Work\\_Nology\\final project\\js-challenges\\src\\js6-objects\\js6.test.js","startTime":1662012024207,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Testing totalScoresArr()"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"number\"\u001b[39m\nReceived: \u001b[31m\"undefined\"\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js5-arrays-iterators-part-2\\js5.test.js:23:46)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"Testing totalScoresArr() Should return a Number","location":null,"status":"failed","title":"Should return a Number"},{"ancestorTitles":["Testing totalScoresArr()"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m1000\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js5-arrays-iterators-part-2\\js5.test.js:28:39)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"Testing totalScoresArr() Should total numbers","location":null,"status":"failed","title":"Should total numbers"},{"ancestorTitles":["Testing reverseString()"],"failureMessages":[],"fullName":"Testing reverseString() Should return a String","location":null,"status":"pending","title":"Should return a String"},{"ancestorTitles":["Testing reverseString()"],"failureMessages":[],"fullName":"Testing reverseString() Should not alter a single letter","location":null,"status":"pending","title":"Should not alter a single letter"},{"ancestorTitles":["Testing reverseString()"],"failureMessages":[],"fullName":"Testing reverseString() Should be the same size as input","location":null,"status":"pending","title":"Should be the same size as input"},{"ancestorTitles":["Testing reverseString()"],"failureMessages":[],"fullName":"Testing reverseString() Should reverse a String","location":null,"status":"pending","title":"Should reverse a String"},{"ancestorTitles":["Testing sortCharactersAlphabetically()"],"failureMessages":[],"fullName":"Testing sortCharactersAlphabetically() Should return an Array","location":null,"status":"pending","title":"Should return an Array"},{"ancestorTitles":["Testing sortCharactersAlphabetically()"],"failureMessages":[],"fullName":"Testing sortCharactersAlphabetically() Should return an Array of Strings","location":null,"status":"pending","title":"Should return an Array of Strings"},{"ancestorTitles":["Testing sortCharactersAlphabetically()"],"failureMessages":[],"fullName":"Testing sortCharactersAlphabetically() Should sort lowercase letters alphabetically","location":null,"status":"pending","title":"Should sort lowercase letters alphabetically"},{"ancestorTitles":["Testing sortCharactersAlphabetically()"],"failureMessages":[],"fullName":"Testing sortCharactersAlphabetically() Should sort uppercase letters alphabetically","location":null,"status":"pending","title":"Should sort uppercase letters alphabetically"},{"ancestorTitles":["Testing sortCharactersAlphabetically()"],"failureMessages":[],"fullName":"Testing sortCharactersAlphabetically() Should sort Uppercase and lowercase characters","location":null,"status":"pending","title":"Should sort Uppercase and lowercase characters"},{"ancestorTitles":["Testing sortCharactersAlphabetically()"],"failureMessages":[],"fullName":"Testing sortCharactersAlphabetically() Should be the same length as the input","location":null,"status":"pending","title":"Should be the same length as the input"},{"ancestorTitles":["Testing sortNumbersHighToLow()"],"failureMessages":[],"fullName":"Testing sortNumbersHighToLow() Should return an Array","location":null,"status":"pending","title":"Should return an Array"},{"ancestorTitles":["Testing sortNumbersHighToLow()"],"failureMessages":[],"fullName":"Testing sortNumbersHighToLow() Should return an Array of Numbers","location":null,"status":"pending","title":"Should return an Array of Numbers"},{"ancestorTitles":["Testing sortNumbersHighToLow()"],"failureMessages":[],"fullName":"Testing sortNumbersHighToLow() Should not alter single numbers","location":null,"status":"pending","title":"Should not alter single numbers"},{"ancestorTitles":["Testing sortNumbersHighToLow()"],"failureMessages":[],"fullName":"Testing sortNumbersHighToLow() Should sort multiple numbers high to low","location":null,"status":"pending","title":"Should sort multiple numbers high to low"},{"ancestorTitles":["Testing sortNumbersHighToLow()"],"failureMessages":[],"fullName":"Testing sortNumbersHighToLow() Should not alter already sorted array's","location":null,"status":"pending","title":"Should not alter already sorted array's"},{"ancestorTitles":["Testing sortNumbersHighToLow()"],"failureMessages":[],"fullName":"Testing sortNumbersHighToLow() Should have the same length as input","location":null,"status":"pending","title":"Should have the same length as input"},{"ancestorTitles":["Testing checkItemInstock()"],"failureMessages":[],"fullName":"Testing checkItemInstock() Should return a String","location":null,"status":"pending","title":"Should return a String"},{"ancestorTitles":["Testing checkItemInstock()"],"failureMessages":[],"fullName":"Testing checkItemInstock() Should handle single items from the stock list","location":null,"status":"pending","title":"Should handle single items from the stock list"},{"ancestorTitles":["Testing checkItemInstock()"],"failureMessages":[],"fullName":"Testing checkItemInstock() Should handle single no match items","location":null,"status":"pending","title":"Should handle single no match items"},{"ancestorTitles":["Testing checkItemInstock()"],"failureMessages":[],"fullName":"Testing checkItemInstock() Should handle every item in the stock list","location":null,"status":"pending","title":"Should handle every item in the stock list"},{"ancestorTitles":["Testing checkPrimaryColours()"],"failureMessages":[],"fullName":"Testing checkPrimaryColours() Should return a Boolean","location":null,"status":"pending","title":"Should return a Boolean"},{"ancestorTitles":["Testing checkPrimaryColours()"],"failureMessages":[],"fullName":"Testing checkPrimaryColours() Should return true if all are primary","location":null,"status":"pending","title":"Should return true if all are primary"},{"ancestorTitles":["Testing checkPrimaryColours()"],"failureMessages":[],"fullName":"Testing checkPrimaryColours() Should return false if all aren't primary","location":null,"status":"pending","title":"Should return false if all aren't primary"},{"ancestorTitles":["Testing checkPrimaryColours()"],"failureMessages":[],"fullName":"Testing checkPrimaryColours() Should handle large inputs","location":null,"status":"pending","title":"Should handle large inputs"},{"ancestorTitles":["Testing checkStringPalindrome()"],"failureMessages":[],"fullName":"Testing checkStringPalindrome() Should return a Boolean","location":null,"status":"pending","title":"Should return a Boolean"},{"ancestorTitles":["Testing checkStringPalindrome()"],"failureMessages":[],"fullName":"Testing checkStringPalindrome() Should return true for a palindrome","location":null,"status":"pending","title":"Should return true for a palindrome"},{"ancestorTitles":["Testing checkStringPalindrome()"],"failureMessages":[],"fullName":"Testing checkStringPalindrome() Should return false for a string","location":null,"status":"pending","title":"Should return false for a string"},{"ancestorTitles":["Testing checkStringPalindrome()"],"failureMessages":[],"fullName":"Testing checkStringPalindrome() Should return true for a palindrome with spaces","location":null,"status":"pending","title":"Should return true for a palindrome with spaces"},{"ancestorTitles":["Testing checkStringPalindrome()"],"failureMessages":[],"fullName":"Testing checkStringPalindrome() Should return false for a string with spaces","location":null,"status":"pending","title":"Should return false for a string with spaces"},{"ancestorTitles":["Testing totalNestedScoresArr()"],"failureMessages":[],"fullName":"Testing totalNestedScoresArr() Should return an Array","location":null,"status":"pending","title":"Should return an Array"},{"ancestorTitles":["Testing totalNestedScoresArr()"],"failureMessages":[],"fullName":"Testing totalNestedScoresArr() Should return array of numbers ","location":null,"status":"pending","title":"Should return array of numbers "},{"ancestorTitles":["Testing totalNestedScoresArr()"],"failureMessages":[],"fullName":"Testing totalNestedScoresArr() Should total nested array of scores","location":null,"status":"pending","title":"Should total nested array of scores"},{"ancestorTitles":["Testing totalNestedScoresArr()"],"failureMessages":[],"fullName":"Testing totalNestedScoresArr() Should not alter single scores","location":null,"status":"pending","title":"Should not alter single scores"},{"ancestorTitles":["Testing totalNestedScoresArr()"],"failureMessages":[],"fullName":"Testing totalNestedScoresArr() Should return a new array and not modify the old one","location":null,"status":"pending","title":"Should return a new array and not modify the old one"},{"ancestorTitles":["Testing encryptString()"],"failureMessages":[],"fullName":"Testing encryptString() Should return a string","location":null,"status":"pending","title":"Should return a string"},{"ancestorTitles":["Testing encryptString()"],"failureMessages":[],"fullName":"Testing encryptString() Should NOT encrypt three letters","location":null,"status":"pending","title":"Should NOT encrypt three letters"},{"ancestorTitles":["Testing encryptString()"],"failureMessages":[],"fullName":"Testing encryptString() Should encrypt after three plus letters","location":null,"status":"pending","title":"Should encrypt after three plus letters"},{"ancestorTitles":["Testing encryptString()"],"failureMessages":[],"fullName":"Testing encryptString() Should encrypt large words","location":null,"status":"pending","title":"Should encrypt large words"},{"ancestorTitles":["Testing encryptString()"],"failureMessages":[],"fullName":"Testing encryptString() Should keep spaces between words","location":null,"status":"pending","title":"Should keep spaces between words"},{"ancestorTitles":["Testing encryptString()"],"failureMessages":[],"fullName":"Testing encryptString() Should handle empty input","location":null,"status":"pending","title":"Should handle empty input"}],"endTime":1662012026315,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mTesting totalScoresArr() › Should return a Number\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"number\"\u001b[39m\n    Received: \u001b[31m\"undefined\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 21 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 22 | \u001b[39m  it(\u001b[32m\"Should return a Number\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 23 | \u001b[39m    expect(\u001b[36mtypeof\u001b[39m totalScoresArr(scoresArr))\u001b[33m.\u001b[39mtoBe(\u001b[32m\"number\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 24 | \u001b[39m    expect(\u001b[36mtypeof\u001b[39m totalScoresArr([\u001b[35m1\u001b[39m]))\u001b[33m.\u001b[39mtoBe(\u001b[32m\"number\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 25 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 26 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js5-arrays-iterators-part-2/js5.test.js\u001b[39m\u001b[0m\u001b[2m:23:46)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mTesting totalScoresArr() › Should total numbers\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m1000\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 26 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 27 | \u001b[39m  it(\u001b[32m\"Should total numbers\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 28 | \u001b[39m    expect(totalScoresArr(scoresArr))\u001b[33m.\u001b[39mtoBe(\u001b[35m1000\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 29 | \u001b[39m    expect(totalScoresArr([\u001b[35m1\u001b[39m\u001b[33m,\u001b[39m \u001b[35m2\u001b[39m\u001b[33m,\u001b[39m \u001b[35m5\u001b[39m\u001b[33m,\u001b[39m \u001b[35m10\u001b[39m]))\u001b[33m.\u001b[39mtoBe(\u001b[35m18\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 30 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js5-arrays-iterators-part-2/js5.test.js\u001b[39m\u001b[0m\u001b[2m:28:39)\u001b[22m\u001b[2m\u001b[22m\n","name":"E:\\Work\\_Nology\\final project\\js-challenges\\src\\js5-arrays-iterators-part-2\\js5.test.js","startTime":1662012024225,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Foundation level challenges","getEmployeeQuotes() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[\"Your body is precious. It is our vehicle for awakening. Treat it with care.\", \"I detest life-insurance agents; they always argue that I shall some day die, which is not so.\", \"The Fifth Amendment is an old friend and a good friend. It is one of the great landmarks in man's struggle to be free of tyranny, to be decent and civilized.\", \"Columbus found a world, and had no chart save one that Faith deciphered in the skies.\", \"Only learn to seize good fortune, for good fortune is always here.\"]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js8-complex-data-types\\js8.test.js:52:47)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"Foundation level challenges getEmployeeQuotes() tests Should return an array of just the quote from the data provided","location":null,"status":"failed","title":"Should return an array of just the quote from the data provided"},{"ancestorTitles":["Foundation level challenges","getTheManagers() tests"],"failureMessages":[],"fullName":"Foundation level challenges getTheManagers() tests Should return an array containing only employees where isManagement is true","location":null,"status":"pending","title":"Should return an array containing only employees where isManagement is true"},{"ancestorTitles":["Foundation level challenges","getNumberOfKeys() tests"],"failureMessages":[],"fullName":"Foundation level challenges getNumberOfKeys() tests Should return a number","location":null,"status":"pending","title":"Should return a number"},{"ancestorTitles":["Foundation level challenges","getNumberOfKeys() tests"],"failureMessages":[],"fullName":"Foundation level challenges getNumberOfKeys() tests Should accurately count the number of keys","location":null,"status":"pending","title":"Should accurately count the number of keys"},{"ancestorTitles":["Intermediate level challenges","findMostExpensiveItem() tests"],"failureMessages":[],"fullName":"Intermediate level challenges findMostExpensiveItem() tests Should return a single object","location":null,"status":"pending","title":"Should return a single object"},{"ancestorTitles":["Intermediate level challenges","findMostExpensiveItem() tests"],"failureMessages":[],"fullName":"Intermediate level challenges findMostExpensiveItem() tests Should return the most expensive item which is a hoodie","location":null,"status":"pending","title":"Should return the most expensive item which is a hoodie"},{"ancestorTitles":["Intermediate level challenges","settotalPrice() tests"],"failureMessages":[],"fullName":"Intermediate level challenges settotalPrice() tests Should return an array","location":null,"status":"pending","title":"Should return an array"},{"ancestorTitles":["Intermediate level challenges","settotalPrice() tests"],"failureMessages":[],"fullName":"Intermediate level challenges settotalPrice() tests Should not modify original array of objects","location":null,"status":"pending","title":"Should not modify original array of objects"},{"ancestorTitles":["Intermediate level challenges","settotalPrice() tests"],"failureMessages":[],"fullName":"Intermediate level challenges settotalPrice() tests Should add a totalPrice key to each object","location":null,"status":"pending","title":"Should add a totalPrice key to each object"},{"ancestorTitles":["Intermediate level challenges","settotalPrice() tests"],"failureMessages":[],"fullName":"Intermediate level challenges settotalPrice() tests Should accurately total each shopping item","location":null,"status":"pending","title":"Should accurately total each shopping item"},{"ancestorTitles":["Intermediate level challenges","totalShoppingBasket() tests"],"failureMessages":[],"fullName":"Intermediate level challenges totalShoppingBasket() tests Should return a number","location":null,"status":"pending","title":"Should return a number"},{"ancestorTitles":["Intermediate level challenges","totalShoppingBasket() tests"],"failureMessages":[],"fullName":"Intermediate level challenges totalShoppingBasket() tests Should accurately total all objects","location":null,"status":"pending","title":"Should accurately total all objects"},{"ancestorTitles":["getImportantKeys() tests"],"failureMessages":[],"fullName":"getImportantKeys() tests Should not modify the original array","location":null,"status":"passed","title":"Should not modify the original array"},{"ancestorTitles":["getImportantKeys() tests"],"failureMessages":["TypeError: Cannot read properties of undefined (reading '0')\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js8-complex-data-types\\js8.test.js:252:12)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"getImportantKeys() tests Should remove unneeded keys from the objects","location":null,"status":"failed","title":"Should remove unneeded keys from the objects"},{"ancestorTitles":["getImportantKeys() tests"],"failureMessages":["TypeError: Cannot read properties of undefined (reading '0')\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js8-complex-data-types\\js8.test.js:261:12)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"getImportantKeys() tests Should alter every item in the array","location":null,"status":"failed","title":"Should alter every item in the array"},{"ancestorTitles":["setImportantKeys() tests"],"failureMessages":[],"fullName":"setImportantKeys() tests Should not modify the original array","location":null,"status":"pending","title":"Should not modify the original array"},{"ancestorTitles":["setImportantKeys() tests"],"failureMessages":[],"fullName":"setImportantKeys() tests Should add missing keys","location":null,"status":"pending","title":"Should add missing keys"},{"ancestorTitles":["setImportantKeys() tests"],"failureMessages":[],"fullName":"setImportantKeys() tests should not modify existing values","location":null,"status":"pending","title":"should not modify existing values"},{"ancestorTitles":["setImportantKeys() tests"],"failureMessages":[],"fullName":"setImportantKeys() tests Should match this exact array of objects","location":null,"status":"pending","title":"Should match this exact array of objects"},{"ancestorTitles":["cleanCocktailResponseData() tests"],"failureMessages":[],"fullName":"cleanCocktailResponseData() tests Should not mutate the original array","location":null,"status":"pending","title":"Should not mutate the original array"},{"ancestorTitles":["cleanCocktailResponseData() tests"],"failureMessages":[],"fullName":"cleanCocktailResponseData() tests Should remove old keys","location":null,"status":"pending","title":"Should remove old keys"},{"ancestorTitles":["cleanCocktailResponseData() tests"],"failureMessages":[],"fullName":"cleanCocktailResponseData() tests Should rename keys","location":null,"status":"pending","title":"Should rename keys"},{"ancestorTitles":["cleanCocktailResponseData() tests"],"failureMessages":[],"fullName":"cleanCocktailResponseData() tests Should add an array for the ingredients","location":null,"status":"pending","title":"Should add an array for the ingredients"},{"ancestorTitles":["cleanCocktailResponseData() tests"],"failureMessages":[],"fullName":"cleanCocktailResponseData() tests Should match given structure","location":null,"status":"pending","title":"Should match given structure"}],"endTime":1662012026323,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mFoundation level challenges › getEmployeeQuotes() tests › Should return an array of just the quote from the data provided\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m[\"Your body is precious. It is our vehicle for awakening. Treat it with care.\", \"I detest life-insurance agents; they always argue that I shall some day die, which is not so.\", \"The Fifth Amendment is an old friend and a good friend. It is one of the great landmarks in man's struggle to be free of tyranny, to be decent and civilized.\", \"Columbus found a world, and had no chart save one that Faith deciphered in the skies.\", \"Only learn to seize good fortune, for good fortune is always here.\"]\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 50 | \u001b[39m  describe(\u001b[32m\"getEmployeeQuotes() tests\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 51 | \u001b[39m    it(\u001b[32m\"Should return an array of just the quote from the data provided\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 52 | \u001b[39m      expect(getEmployeeQuotes(employeeData))\u001b[33m.\u001b[39mtoStrictEqual([\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 53 | \u001b[39m        \u001b[32m\"Your body is precious. It is our vehicle for awakening. Treat it with care.\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 54 | \u001b[39m        \u001b[32m\"I detest life-insurance agents; they always argue that I shall some day die, which is not so.\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 55 | \u001b[39m        \u001b[32m\"The Fifth Amendment is an old friend and a good friend. It is one of the great landmarks in man's struggle to be free of tyranny, to be decent and civilized.\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js8-complex-data-types/js8.test.js\u001b[39m\u001b[0m\u001b[2m:52:47)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mgetImportantKeys() tests › Should remove unneeded keys from the objects\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading '0')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 250 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 251 | \u001b[39m  it(\u001b[32m\"Should remove unneeded keys from the objects\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 252 | \u001b[39m    expect(getImportantKeys(mealsArr)[\u001b[35m0\u001b[39m])\u001b[33m.\u001b[39mtoStrictEqual({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 253 | \u001b[39m      id\u001b[33m:\u001b[39m \u001b[35m10\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 254 | \u001b[39m      name\u001b[33m:\u001b[39m \u001b[32m\"Tikka Masala\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 255 | \u001b[39m      ingredients\u001b[33m:\u001b[39m [\u001b[32m\"rice\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"tomato\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"chicken\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"curry powder\"\u001b[39m]\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js8-complex-data-types/js8.test.js\u001b[39m\u001b[0m\u001b[2m:252:12)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mgetImportantKeys() tests › Should alter every item in the array\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading '0')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 259 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 260 | \u001b[39m  it(\u001b[32m\"Should alter every item in the array\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 261 | \u001b[39m    expect(getImportantKeys(mealsArr)[\u001b[35m0\u001b[39m])\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoStrictEqual([\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 262 | \u001b[39m      {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 263 | \u001b[39m        id\u001b[33m:\u001b[39m \u001b[35m10\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 264 | \u001b[39m        name\u001b[33m:\u001b[39m \u001b[32m\"Tikka Masala\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js8-complex-data-types/js8.test.js\u001b[39m\u001b[0m\u001b[2m:261:12)\u001b[22m\u001b[2m\u001b[22m\n","name":"E:\\Work\\_Nology\\final project\\js-challenges\\src\\js8-complex-data-types\\js8.test.js","startTime":1662012024216,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Testing removeFalseValues()"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js4-array-iterators\\js4.test.js:31:54)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"Testing removeFalseValues() Should return an array","location":null,"status":"failed","title":"Should return an array"},{"ancestorTitles":["Testing removeFalseValues()"],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'every')\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js4-array-iterators\\js4.test.js:36:29)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"Testing removeFalseValues() Should return an array of Booleans","location":null,"status":"failed","title":"Should return an array of Booleans"},{"ancestorTitles":["Testing removeFalseValues()"],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'length')\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js4-array-iterators\\js4.test.js:41:12)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"Testing removeFalseValues() Should remove false values from an array","location":null,"status":"failed","title":"Should remove false values from an array"},{"ancestorTitles":["Testing removeFalseValues()"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[true, true, true, true]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js4-array-iterators\\js4.test.js:46:48)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"Testing removeFalseValues() Should have the same amount of true values as the orginal array","location":null,"status":"failed","title":"Should have the same amount of true values as the orginal array"},{"ancestorTitles":["Testing createPercentageList()"],"failureMessages":[],"fullName":"Testing createPercentageList() Should return an array","location":null,"status":"pending","title":"Should return an array"},{"ancestorTitles":["Testing createPercentageList()"],"failureMessages":[],"fullName":"Testing createPercentageList() Should return an array of Strings","location":null,"status":"pending","title":"Should return an array of Strings"},{"ancestorTitles":["Testing createPercentageList()"],"failureMessages":[],"fullName":"Testing createPercentageList() Should convert numbers into percentages","location":null,"status":"pending","title":"Should convert numbers into percentages"},{"ancestorTitles":["Testing createPercentageList()"],"failureMessages":[],"fullName":"Testing createPercentageList() Should match given array's length","location":null,"status":"pending","title":"Should match given array's length"},{"ancestorTitles":["Testing createListOfPoessessions()"],"failureMessages":[],"fullName":"Testing createListOfPoessessions() Should return an array","location":null,"status":"pending","title":"Should return an array"},{"ancestorTitles":["Testing createListOfPoessessions()"],"failureMessages":[],"fullName":"Testing createListOfPoessessions() Should return an array of Strings","location":null,"status":"pending","title":"Should return an array of Strings"},{"ancestorTitles":["Testing createListOfPoessessions()"],"failureMessages":[],"fullName":"Testing createListOfPoessessions() Should prefix name as expected","location":null,"status":"pending","title":"Should prefix name as expected"},{"ancestorTitles":["Testing createListOfPoessessions()"],"failureMessages":[],"fullName":"Testing createListOfPoessessions() Should match given Array's length","location":null,"status":"pending","title":"Should match given Array's length"},{"ancestorTitles":["Testing convertStringToNumbersArray()"],"failureMessages":[],"fullName":"Testing convertStringToNumbersArray() Should return an array","location":null,"status":"pending","title":"Should return an array"},{"ancestorTitles":["Testing convertStringToNumbersArray()"],"failureMessages":[],"fullName":"Testing convertStringToNumbersArray() Should return an array of Numbers","location":null,"status":"pending","title":"Should return an array of Numbers"},{"ancestorTitles":["Testing convertStringToNumbersArray()"],"failureMessages":[],"fullName":"Testing convertStringToNumbersArray() Should convert string as expected","location":null,"status":"pending","title":"Should convert string as expected"},{"ancestorTitles":["Testing convertStringToNumbersArray()"],"failureMessages":[],"fullName":"Testing convertStringToNumbersArray() Should handle big inputs","location":null,"status":"pending","title":"Should handle big inputs"},{"ancestorTitles":["Testing convertStringToNumbersArray()"],"failureMessages":[],"fullName":"Testing convertStringToNumbersArray() Should handle single inputs","location":null,"status":"pending","title":"Should handle single inputs"},{"ancestorTitles":["Testing createOddEvenArray()"],"failureMessages":[],"fullName":"Testing createOddEvenArray() Should return an array","location":null,"status":"pending","title":"Should return an array"},{"ancestorTitles":["Testing createOddEvenArray()"],"failureMessages":[],"fullName":"Testing createOddEvenArray() Should return an array of Strings","location":null,"status":"pending","title":"Should return an array of Strings"},{"ancestorTitles":["Testing createOddEvenArray()"],"failureMessages":[],"fullName":"Testing createOddEvenArray() Should convert string as expected","location":null,"status":"pending","title":"Should convert string as expected"},{"ancestorTitles":["Testing createOddEvenArray()"],"failureMessages":[],"fullName":"Testing createOddEvenArray() Should handle big inputs","location":null,"status":"pending","title":"Should handle big inputs"},{"ancestorTitles":["Testing createOddEvenArray()"],"failureMessages":[],"fullName":"Testing createOddEvenArray() Should handle single inputs","location":null,"status":"pending","title":"Should handle single inputs"},{"ancestorTitles":["Testing filterBooksBySearch()"],"failureMessages":[],"fullName":"Testing filterBooksBySearch() Should return an array","location":null,"status":"pending","title":"Should return an array"},{"ancestorTitles":["Testing filterBooksBySearch()"],"failureMessages":[],"fullName":"Testing filterBooksBySearch() Should return an array of Strings","location":null,"status":"pending","title":"Should return an array of Strings"},{"ancestorTitles":["Testing filterBooksBySearch()"],"failureMessages":[],"fullName":"Testing filterBooksBySearch() Should handle one match","location":null,"status":"pending","title":"Should handle one match"},{"ancestorTitles":["Testing filterBooksBySearch()"],"failureMessages":[],"fullName":"Testing filterBooksBySearch() Should handle multiple matches","location":null,"status":"pending","title":"Should handle multiple matches"},{"ancestorTitles":["Testing filterBooksBySearch()"],"failureMessages":[],"fullName":"Testing filterBooksBySearch() Should handle large matches","location":null,"status":"pending","title":"Should handle large matches"},{"ancestorTitles":["Testing filterBooksBySearch()"],"failureMessages":[],"fullName":"Testing filterBooksBySearch() Should handle single character matches","location":null,"status":"pending","title":"Should handle single character matches"},{"ancestorTitles":["Testing filterBooksBySearch()"],"failureMessages":[],"fullName":"Testing filterBooksBySearch() Should handle no matches","location":null,"status":"pending","title":"Should handle no matches"},{"ancestorTitles":["Testing formatStringArray()"],"failureMessages":[],"fullName":"Testing formatStringArray() Should return a String","location":null,"status":"pending","title":"Should return a String"},{"ancestorTitles":["Testing formatStringArray()"],"failureMessages":[],"fullName":"Testing formatStringArray() Should NOT return undefined","location":null,"status":"pending","title":"Should NOT return undefined"},{"ancestorTitles":["Testing formatStringArray()"],"failureMessages":[],"fullName":"Testing formatStringArray() Should remove whitespace","location":null,"status":"pending","title":"Should remove whitespace"},{"ancestorTitles":["Testing formatStringArray()"],"failureMessages":[],"fullName":"Testing formatStringArray() Should be lowercase","location":null,"status":"pending","title":"Should be lowercase"},{"ancestorTitles":["Testing formatStringArray()"],"failureMessages":[],"fullName":"Testing formatStringArray() Should format a single string as expected","location":null,"status":"pending","title":"Should format a single string as expected"},{"ancestorTitles":["Testing formatStringArray()"],"failureMessages":[],"fullName":"Testing formatStringArray() Should format multiple strings as expected","location":null,"status":"pending","title":"Should format multiple strings as expected"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should NOT return undefined","location":null,"status":"pending","title":"Should NOT return undefined"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should return an array","location":null,"status":"pending","title":"Should return an array"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should return an array of Strings","location":null,"status":"pending","title":"Should return an array of Strings"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should remove numbers","location":null,"status":"pending","title":"Should remove numbers"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should remove punctuation","location":null,"status":"pending","title":"Should remove punctuation"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should remove whitespace","location":null,"status":"pending","title":"Should remove whitespace"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should uppercase even index","location":null,"status":"pending","title":"Should uppercase even index"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should lowercase odd index","location":null,"status":"pending","title":"Should lowercase odd index"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should format string as expected","location":null,"status":"pending","title":"Should format string as expected"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should handle empty input","location":null,"status":"pending","title":"Should handle empty input"},{"ancestorTitles":["Testing fizzBuzz()"],"failureMessages":[],"fullName":"Testing fizzBuzz() Should NOT return undefined","location":null,"status":"pending","title":"Should NOT return undefined"},{"ancestorTitles":["Testing fizzBuzz()"],"failureMessages":[],"fullName":"Testing fizzBuzz() Should return an array","location":null,"status":"pending","title":"Should return an array"},{"ancestorTitles":["Testing fizzBuzz()"],"failureMessages":[],"fullName":"Testing fizzBuzz() Should return an array of Strings","location":null,"status":"pending","title":"Should return an array of Strings"},{"ancestorTitles":["Testing fizzBuzz()"],"failureMessages":[],"fullName":"Testing fizzBuzz() Should have the correct amount of Fizz","location":null,"status":"pending","title":"Should have the correct amount of Fizz"},{"ancestorTitles":["Testing fizzBuzz()"],"failureMessages":[],"fullName":"Testing fizzBuzz() Should have Fizz in the correct index","location":null,"status":"pending","title":"Should have Fizz in the correct index"},{"ancestorTitles":["Testing fizzBuzz()"],"failureMessages":[],"fullName":"Testing fizzBuzz() Should have the correct amount of Buzz","location":null,"status":"pending","title":"Should have the correct amount of Buzz"},{"ancestorTitles":["Testing fizzBuzz()"],"failureMessages":[],"fullName":"Testing fizzBuzz() Should have Buzz in the correct index","location":null,"status":"pending","title":"Should have Buzz in the correct index"},{"ancestorTitles":["Testing fizzBuzz()"],"failureMessages":[],"fullName":"Testing fizzBuzz() Should have the correct amount of FizzBuzz","location":null,"status":"pending","title":"Should have the correct amount of FizzBuzz"},{"ancestorTitles":["Testing fizzBuzz()"],"failureMessages":[],"fullName":"Testing fizzBuzz() Should have FizzBuzz in the correct index","location":null,"status":"pending","title":"Should have FizzBuzz in the correct index"},{"ancestorTitles":["Testing fizzBuzz()"],"failureMessages":[],"fullName":"Testing fizzBuzz() Should NOT alter the length of a clean input","location":null,"status":"pending","title":"Should NOT alter the length of a clean input"},{"ancestorTitles":["Testing fizzBuzz()"],"failureMessages":[],"fullName":"Testing fizzBuzz() Should fizzBuzz a a clean array of numbers as strings as expected","location":null,"status":"pending","title":"Should fizzBuzz a a clean array of numbers as strings as expected"},{"ancestorTitles":["Testing fizzBuzz()"],"failureMessages":[],"fullName":"Testing fizzBuzz() Should  NOT alter the length of a clean array of numbers as strings","location":null,"status":"pending","title":"Should  NOT alter the length of a clean array of numbers as strings"},{"ancestorTitles":["Testing fizzBuzz()"],"failureMessages":[],"fullName":"Testing fizzBuzz() Should fizzBuzz a mixed input as expected","location":null,"status":"pending","title":"Should fizzBuzz a mixed input as expected"},{"ancestorTitles":["Testing fizzBuzz()"],"failureMessages":[],"fullName":"Testing fizzBuzz() Should alter the length of a mixed input","location":null,"status":"pending","title":"Should alter the length of a mixed input"}],"endTime":1662012026358,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mTesting removeFalseValues() › Should return an array\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32mtrue\u001b[39m\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 29 | \u001b[39mdescribe(\u001b[32m\"Testing removeFalseValues()\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 30 | \u001b[39m  it(\u001b[32m\"Should return an array\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 31 | \u001b[39m    expect(\u001b[33mArray\u001b[39m\u001b[33m.\u001b[39misArray(removeFalseValues([\u001b[36mtrue\u001b[39m])))\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 32 | \u001b[39m    expect(\u001b[33mArray\u001b[39m\u001b[33m.\u001b[39misArray(removeFalseValues([\u001b[36mfalse\u001b[39m])))\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js4-array-iterators/js4.test.js\u001b[39m\u001b[0m\u001b[2m:31:54)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mTesting removeFalseValues() › Should return an array of Booleans\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading 'every')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 35 | \u001b[39m  it(\u001b[32m\"Should return an array of Booleans\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 36 | \u001b[39m    \u001b[36mconst\u001b[39m testForBooleans \u001b[33m=\u001b[39m removeFalseValues(mixedBooleanArr)\u001b[33m.\u001b[39mevery((bool) \u001b[33m=>\u001b[39m \u001b[36mtypeof\u001b[39m bool \u001b[33m===\u001b[39m \u001b[32m\"boolean\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m    expect(testForBooleans)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 39 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js4-array-iterators/js4.test.js\u001b[39m\u001b[0m\u001b[2m:36:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mTesting removeFalseValues() › Should remove false values from an array\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading 'length')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 39 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 40 | \u001b[39m  it(\u001b[32m\"Should remove false values from an array\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 41 | \u001b[39m    expect(removeFalseValues(\u001b[33mArray\u001b[39m(\u001b[35m5\u001b[39m)\u001b[33m.\u001b[39mfill(\u001b[36mfalse\u001b[39m))\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBe(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 42 | \u001b[39m    expect(removeFalseValues(\u001b[33mArray\u001b[39m(\u001b[35m20\u001b[39m)\u001b[33m.\u001b[39mfill(\u001b[36mfalse\u001b[39m))\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBe(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 43 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 44 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js4-array-iterators/js4.test.js\u001b[39m\u001b[0m\u001b[2m:41:12)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mTesting removeFalseValues() › Should have the same amount of true values as the orginal array\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m[true, true, true, true]\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 44 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 45 | \u001b[39m  it(\u001b[32m\"Should have the same amount of true values as the orginal array\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 46 | \u001b[39m    expect(removeFalseValues(mixedBooleanArr))\u001b[33m.\u001b[39mtoEqual([\u001b[36mtrue\u001b[39m\u001b[33m,\u001b[39m \u001b[36mtrue\u001b[39m\u001b[33m,\u001b[39m \u001b[36mtrue\u001b[39m\u001b[33m,\u001b[39m \u001b[36mtrue\u001b[39m])\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 47 | \u001b[39m    expect(removeFalseValues(\u001b[33mArray\u001b[39m(\u001b[35m5\u001b[39m)\u001b[33m.\u001b[39mfill(\u001b[36mtrue\u001b[39m))\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBe(\u001b[35m5\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 48 | \u001b[39m    expect(removeFalseValues(\u001b[33mArray\u001b[39m(\u001b[35m60\u001b[39m)\u001b[33m.\u001b[39mfill(\u001b[36mtrue\u001b[39m))\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBe(\u001b[35m60\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 49 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js4-array-iterators/js4.test.js\u001b[39m\u001b[0m\u001b[2m:46:48)\u001b[22m\u001b[2m\u001b[22m\n","name":"E:\\Work\\_Nology\\final project\\js-challenges\\src\\js4-array-iterators\\js4.test.js","startTime":1662012024204,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["getData() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m1\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:27:19)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"getData() tests Fetch should have been called once","location":null,"status":"failed","title":"Fetch should have been called once"},{"ancestorTitles":["getData() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[{\"age\": 47, \"height\": 170, \"id\": \"001\", \"interests\": [\"swimming\", \"reading\", \"juggling\"], \"isEmployed\": true, \"name\": \"Peter\"}, {\"age\": 16, \"height\": 130, \"id\": \"002\", \"interests\": [\"writing\", \"hiking\", \"watching TV\"], \"isEmployed\": false, \"name\": \"Georgia\"}, {\"age\": 78, \"height\": 140, \"id\": \"003\", \"interests\": [\"knitting\", \"baking\", \"MMA\"], \"isEmployed\": false, \"name\": \"Joanna\"}, {\"age\": 32, \"height\": 190, \"id\": \"004\", \"interests\": [\"shooting\", \"MMA\", \"writing\"], \"isEmployed\": true, \"name\": \"Buzz\"}, {\"age\": 22, \"height\": 160, \"id\": \"005\", \"interests\": [\"swimming\", \"watching TV\", \"knitting\"], \"isEmployed\": true, \"name\": \"Travis\"}, {\"age\": 27, \"height\": 160, \"id\": \"006\", \"interests\": [\"baking\", \"hiking\", \"shooting\"], \"isEmployed\": false, \"name\": \"Paula\"}, {\"age\": 50, \"height\": 150, \"id\": \"007\", \"interests\": [\"reading\", \"juggling\", \"knitting\"], \"isEmployed\": false, \"name\": \"J\"}]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:32:18)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"getData() tests Should return the data","location":null,"status":"failed","title":"Should return the data"},{"ancestorTitles":["getNames() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m1\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:39:19)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"getNames() tests Fetch should have been called once","location":null,"status":"failed","title":"Fetch should have been called once"},{"ancestorTitles":["getNames() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:44:37)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"getNames() tests Should return an array of names","location":null,"status":"failed","title":"Should return an array of names"},{"ancestorTitles":["getEmployedPeople() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m1\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:79:19)\n    at Object.asyncJestTest (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at E:\\Work\\_Nology\\final project\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"getEmployedPeople() tests Fetch should have been called once","location":null,"status":"failed","title":"Fetch should have been called once"},{"ancestorTitles":["getEmployedPeople() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:85:46)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"getEmployedPeople() tests Should return an array of employed people objects","location":null,"status":"failed","title":"Should return an array of employed people objects"},{"ancestorTitles":["findPersonWithId() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"object\"\u001b[39m\nReceived: \u001b[31m\"undefined\"\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:112:39)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"findPersonWithId() tests Should return a single object","location":null,"status":"failed","title":"Should return a single object"},{"ancestorTitles":["findPersonWithId() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m{\"age\": 47, \"height\": 170, \"id\": \"001\", \"interests\": [\"swimming\", \"reading\", \"juggling\"], \"isEmployed\": true, \"name\": \"Peter\"}\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:118:25)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"findPersonWithId() tests Should return a person with the id of 001","location":null,"status":"failed","title":"Should return a person with the id of 001"},{"ancestorTitles":["findPersonWithId() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m{\"age\": 22, \"height\": 160, \"id\": \"005\", \"interests\": [\"swimming\", \"watching TV\", \"knitting\"], \"isEmployed\": true, \"name\": \"Travis\"}\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:123:25)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"findPersonWithId() tests Should return a person with the id of 005","location":null,"status":"failed","title":"Should return a person with the id of 005"},{"ancestorTitles":["findPersonWithId() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"Person not found\"\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:128:22)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"findPersonWithId() tests Should return a message of 'Person not found' when no person has a matching ID","location":null,"status":"failed","title":"Should return a message of 'Person not found' when no person has a matching ID"},{"ancestorTitles":["getPeopleWithMatchingInterests() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:173:45)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"getPeopleWithMatchingInterests() tests Should return an array if interests are found","location":null,"status":"failed","title":"Should return an array if interests are found"},{"ancestorTitles":["getPeopleWithMatchingInterests() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[{\"age\": 47, \"height\": 170, \"id\": \"001\", \"interests\": [\"swimming\", \"reading\", \"juggling\"], \"isEmployed\": true, \"name\": \"Peter\"}, {\"age\": 22, \"height\": 160, \"id\": \"005\", \"interests\": [\"swimming\", \"watching TV\", \"knitting\"], \"isEmployed\": true, \"name\": \"Travis\"}]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:178:30)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"getPeopleWithMatchingInterests() tests Should return all people with a matching interest (swimming)","location":null,"status":"failed","title":"Should return all people with a matching interest (swimming)"},{"ancestorTitles":["getPeopleWithMatchingInterests() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[{\"age\": 78, \"height\": 140, \"id\": \"003\", \"interests\": [\"knitting\", \"baking\", \"MMA\"], \"isEmployed\": false, \"name\": \"Joanna\"}, {\"age\": 32, \"height\": 190, \"id\": \"004\", \"interests\": [\"shooting\", \"MMA\", \"writing\"], \"isEmployed\": true, \"name\": \"Buzz\"}]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:183:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"getPeopleWithMatchingInterests() tests Should return all people with a matching interest (mma)","location":null,"status":"failed","title":"Should return all people with a matching interest (mma)"},{"ancestorTitles":["getPeopleWithMatchingInterests() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"No people with interest found\"\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:188:25)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"getPeopleWithMatchingInterests() tests Should return 'No people with interest found' if no matching interests on people","location":null,"status":"failed","title":"Should return 'No people with interest found' if no matching interests on people"},{"ancestorTitles":["setDescription() tests"],"failureMessages":[],"fullName":"setDescription() tests Should not modify original data","location":null,"status":"passed","title":"Should not modify original data"},{"ancestorTitles":["setDescription() tests"],"failureMessages":["TypeError: Cannot read properties of undefined (reading '0')\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:273:34)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"setDescription() tests Should add a description key","location":null,"status":"failed","title":"Should add a description key"},{"ancestorTitles":["setDescription() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[{\"age\": 47, \"description\": \"My name is Peter, I am 47 years old and 170cm tall. I enjoy swimming, reading and juggling. I am currently employed\", \"height\": 170, \"id\": \"001\", \"interests\": [\"swimming\", \"reading\", \"juggling\"], \"isEmployed\": true, \"name\": \"Peter\"}, {\"age\": 16, \"description\": \"My name is Georgia, I am 16 years old and 130cm tall. I enjoy writing, hiking and watching TV. I am not currently employed\", \"height\": 130, \"id\": \"002\", \"interests\": [\"writing\", \"hiking\", \"watching TV\"], \"isEmployed\": false, \"name\": \"Georgia\"}, {\"age\": 78, \"description\": \"My name is Joanna, I am 78 years old and 140cm tall. I enjoy knitting, baking and MMA. I am not currently employed\", \"height\": 140, \"id\": \"003\", \"interests\": [\"knitting\", \"baking\", \"MMA\"], \"isEmployed\": false, \"name\": \"Joanna\"}, {\"age\": 32, \"description\": \"My name is Buzz, I am 32 years old and 190cm tall. I enjoy shooting, MMA and writing. I am currently employed\", \"height\": 190, \"id\": \"004\", \"interests\": [\"shooting\", \"MMA\", \"writing\"], \"isEmployed\": true, \"name\": \"Buzz\"}, {\"age\": 22, \"description\": \"My name is Travis, I am 22 years old and 160cm tall. I enjoy swimming, watching TV and knitting. I am currently employed\", \"height\": 160, \"id\": \"005\", \"interests\": [\"swimming\", \"watching TV\", \"knitting\"], \"isEmployed\": true, \"name\": \"Travis\"}, {\"age\": 27, \"description\": \"My name is Paula, I am 27 years old and 160cm tall. I enjoy baking, hiking and shooting. I am not currently employed\", \"height\": 160, \"id\": \"006\", \"interests\": [\"baking\", \"hiking\", \"shooting\"], \"isEmployed\": false, \"name\": \"Paula\"}, {\"age\": 50, \"description\": \"My name is J, I am 50 years old and 150cm tall. I enjoy reading, juggling and knitting. I am not currently employed\", \"height\": 150, \"id\": \"007\", \"interests\": [\"reading\", \"juggling\", \"knitting\"], \"isEmployed\": false, \"name\": \"J\"}]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:278:35)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"setDescription() tests Should add accurate description to each object","location":null,"status":"failed","title":"Should add accurate description to each object"},{"ancestorTitles":["setInterestDetails() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m2\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:477:19)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"setInterestDetails() tests should call fetch twice","location":null,"status":"failed","title":"should call fetch twice"},{"ancestorTitles":["setInterestDetails() tests"],"failureMessages":[],"fullName":"setInterestDetails() tests Should not modify original data","location":null,"status":"passed","title":"Should not modify original data"},{"ancestorTitles":["setInterestDetails() tests"],"failureMessages":["TypeError: Cannot read properties of undefined (reading '0')\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:487:51)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"setInterestDetails() tests Should turn the interests key into an array of objects","location":null,"status":"failed","title":"Should turn the interests key into an array of objects"},{"ancestorTitles":["setInterestDetails() tests"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[{\"age\": 47, \"height\": 170, \"id\": \"001\", \"interests\": [{\"costPerAnnum\": 800, \"interest\": \"swimming\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 20000000}, {\"costPerAnnum\": 500, \"interest\": \"reading\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 30000000}, {\"costPerAnnum\": 100, \"interest\": \"juggling\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 1000000}], \"isEmployed\": true, \"name\": \"Peter\"}, {\"age\": 16, \"height\": 130, \"id\": \"002\", \"interests\": [{\"costPerAnnum\": 200, \"interest\": \"writing\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 15000000}, {\"costPerAnnum\": 1000, \"interest\": \"hiking\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 25000000}, {\"costPerAnnum\": 200, \"interest\": \"watching TV\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 450000000}], \"isEmployed\": false, \"name\": \"Georgia\"}, {\"age\": 78, \"height\": 140, \"id\": \"003\", \"interests\": [{\"costPerAnnum\": 400, \"interest\": \"knitting\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 10000000}, {\"costPerAnnum\": 400, \"interest\": \"baking\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 20000000}, {\"costPerAnnum\": 1000, \"interest\": \"MMA\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 20000000}], \"isEmployed\": false, \"name\": \"Joanna\"}, {\"age\": 32, \"height\": 190, \"id\": \"004\", \"interests\": [{\"costPerAnnum\": 10000, \"interest\": \"shooting\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 5000000}, {\"costPerAnnum\": 1000, \"interest\": \"MMA\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 20000000}, {\"costPerAnnum\": 200, \"interest\": \"writing\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 15000000}], \"isEmployed\": true, \"name\": \"Buzz\"}, {\"age\": 22, \"height\": 160, \"id\": \"005\", \"interests\": [{\"costPerAnnum\": 800, \"interest\": \"swimming\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 20000000}, {\"costPerAnnum\": 200, \"interest\": \"watching TV\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 450000000}, {\"costPerAnnum\": 400, \"interest\": \"knitting\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 10000000}], \"isEmployed\": true, \"name\": \"Travis\"}, {\"age\": 27, \"height\": 160, \"id\": \"006\", \"interests\": [{\"costPerAnnum\": 400, \"interest\": \"baking\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 20000000}, {\"costPerAnnum\": 1000, \"interest\": \"hiking\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 25000000}, {\"costPerAnnum\": 10000, \"interest\": \"shooting\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 5000000}], \"isEmployed\": false, \"name\": \"Paula\"}, {\"age\": 50, \"height\": 150, \"id\": \"007\", \"interests\": [{\"costPerAnnum\": 500, \"interest\": \"reading\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 30000000}, {\"costPerAnnum\": 100, \"interest\": \"juggling\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 1000000}, {\"costPerAnnum\": 400, \"interest\": \"knitting\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 10000000}], \"isEmployed\": false, \"name\": \"J\"}]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js:496:39)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"setInterestDetails() tests Should match the exact dummy array of objects","location":null,"status":"failed","title":"Should match the exact dummy array of objects"}],"endTime":1662012026361,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mgetData() tests › Fetch should have been called once\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected number of calls: \u001b[32m1\u001b[39m\n    Received number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 25 | \u001b[39m  it(\u001b[32m\"Fetch should have been called once\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 26 | \u001b[39m    getData(\u001b[32m\"./mockPersonApi.json\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 27 | \u001b[39m    expect(fetch)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 28 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 29 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 30 | \u001b[39m  it(\u001b[32m\"Should return the data\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:27:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mgetData() tests › Should return the data\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m[{\"age\": 47, \"height\": 170, \"id\": \"001\", \"interests\": [\"swimming\", \"reading\", \"juggling\"], \"isEmployed\": true, \"name\": \"Peter\"}, {\"age\": 16, \"height\": 130, \"id\": \"002\", \"interests\": [\"writing\", \"hiking\", \"watching TV\"], \"isEmployed\": false, \"name\": \"Georgia\"}, {\"age\": 78, \"height\": 140, \"id\": \"003\", \"interests\": [\"knitting\", \"baking\", \"MMA\"], \"isEmployed\": false, \"name\": \"Joanna\"}, {\"age\": 32, \"height\": 190, \"id\": \"004\", \"interests\": [\"shooting\", \"MMA\", \"writing\"], \"isEmployed\": true, \"name\": \"Buzz\"}, {\"age\": 22, \"height\": 160, \"id\": \"005\", \"interests\": [\"swimming\", \"watching TV\", \"knitting\"], \"isEmployed\": true, \"name\": \"Travis\"}, {\"age\": 27, \"height\": 160, \"id\": \"006\", \"interests\": [\"baking\", \"hiking\", \"shooting\"], \"isEmployed\": false, \"name\": \"Paula\"}, {\"age\": 50, \"height\": 150, \"id\": \"007\", \"interests\": [\"reading\", \"juggling\", \"knitting\"], \"isEmployed\": false, \"name\": \"J\"}]\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 30 | \u001b[39m  it(\u001b[32m\"Should return the data\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 | \u001b[39m    \u001b[36mconst\u001b[39m data \u001b[33m=\u001b[39m await getData(\u001b[32m\"./mockPersonApi.json\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 32 | \u001b[39m    expect(data)\u001b[33m.\u001b[39mtoStrictEqual(people)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 35 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:32:18)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mgetNames() tests › Fetch should have been called once\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected number of calls: \u001b[32m1\u001b[39m\n    Received number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m  it(\u001b[32m\"Fetch should have been called once\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 | \u001b[39m    getNames(\u001b[32m\"./mockPersonApi.json\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 39 | \u001b[39m    expect(fetch)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 40 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 41 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 42 | \u001b[39m  it(\u001b[32m\"Should return an array of names\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:39:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mgetNames() tests › Should return an array of names\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32mtrue\u001b[39m\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 42 | \u001b[39m  it(\u001b[32m\"Should return an array of names\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 43 | \u001b[39m    \u001b[36mconst\u001b[39m namesArr \u001b[33m=\u001b[39m await getNames(\u001b[32m\"./mockPersonApi.json\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 44 | \u001b[39m    expect(\u001b[33mArray\u001b[39m\u001b[33m.\u001b[39misArray(namesArr))\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 45 | \u001b[39m    expect(namesArr)\u001b[33m.\u001b[39mtoStrictEqual([\u001b[32m\"Peter\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"Georgia\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"Joanna\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"Buzz\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"Travis\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"Paula\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"J\"\u001b[39m])\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 46 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 47 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:44:37)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mgetEmployedPeople() tests › Fetch should have been called once\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected number of calls: \u001b[32m1\u001b[39m\n    Received number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 77 | \u001b[39m  it(\u001b[32m\"Fetch should have been called once\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 78 | \u001b[39m    getEmployedPeople(\u001b[32m\"./mockPersonApi.json\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 79 | \u001b[39m    expect(fetch)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 80 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 81 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 82 | \u001b[39m  it(\u001b[32m\"Should return an array of employed people objects\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:79:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mgetEmployedPeople() tests › Should return an array of employed people objects\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32mtrue\u001b[39m\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 83 | \u001b[39m    \u001b[36mconst\u001b[39m employedPeopleArr \u001b[33m=\u001b[39m await getEmployedPeople(\u001b[32m\"./mockPersonApi.json\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 84 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 85 | \u001b[39m    expect(\u001b[33mArray\u001b[39m\u001b[33m.\u001b[39misArray(employedPeopleArr))\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 86 | \u001b[39m    expect(employedPeopleArr\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBe(\u001b[35m3\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 87 | \u001b[39m    expect(employedPeopleArr)\u001b[33m.\u001b[39mtoStrictEqual(mockApiResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 88 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:85:46)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mfindPersonWithId() tests › Should return a single object\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"object\"\u001b[39m\n    Received: \u001b[31m\"undefined\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 | \u001b[39m  it(\u001b[32m\"Should return a single object\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 | \u001b[39m    \u001b[36mconst\u001b[39m returnFromFunction \u001b[33m=\u001b[39m await findPersonWithId(\u001b[32m\"./mockPersonApi.json\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"001\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 112 | \u001b[39m    expect(\u001b[36mtypeof\u001b[39m returnFromFunction)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"object\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 113 | \u001b[39m    expect(returnFromFunction)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m\"id\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 114 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 115 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:112:39)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mfindPersonWithId() tests › Should return a person with the id of 001\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m{\"age\": 47, \"height\": 170, \"id\": \"001\", \"interests\": [\"swimming\", \"reading\", \"juggling\"], \"isEmployed\": true, \"name\": \"Peter\"}\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 116 | \u001b[39m  it(\u001b[32m\"Should return a person with the id of 001\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 117 | \u001b[39m    \u001b[36mconst\u001b[39m personId001 \u001b[33m=\u001b[39m await findPersonWithId(\u001b[32m\"./mockPersonApi.json\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"001\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 118 | \u001b[39m    expect(personId001)\u001b[33m.\u001b[39mtoStrictEqual(dummyId001)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 119 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 120 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 121 | \u001b[39m  it(\u001b[32m\"Should return a person with the id of 005\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:118:25)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mfindPersonWithId() tests › Should return a person with the id of 005\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m{\"age\": 22, \"height\": 160, \"id\": \"005\", \"interests\": [\"swimming\", \"watching TV\", \"knitting\"], \"isEmployed\": true, \"name\": \"Travis\"}\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 121 | \u001b[39m  it(\u001b[32m\"Should return a person with the id of 005\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 122 | \u001b[39m    \u001b[36mconst\u001b[39m personId005 \u001b[33m=\u001b[39m await findPersonWithId(\u001b[32m\"./mockPersonApi.json\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"005\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 123 | \u001b[39m    expect(personId005)\u001b[33m.\u001b[39mtoStrictEqual(dummyId005)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 124 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 125 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 126 | \u001b[39m  it(\u001b[32m\"Should return a message of 'Person not found' when no person has a matching ID\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:123:25)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mfindPersonWithId() tests › Should return a message of 'Person not found' when no person has a matching ID\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"Person not found\"\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 126 | \u001b[39m  it(\u001b[32m\"Should return a message of 'Person not found' when no person has a matching ID\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 127 | \u001b[39m    \u001b[36mconst\u001b[39m notFound \u001b[33m=\u001b[39m await findPersonWithId(\u001b[32m\"./mockPersonApi.json\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"020\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 128 | \u001b[39m    expect(notFound)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"Person not found\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 129 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 130 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 131 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:128:22)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mgetPeopleWithMatchingInterests() tests › Should return an array if interests are found\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32mtrue\u001b[39m\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 171 | \u001b[39m  it(\u001b[32m\"Should return an array if interests are found\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 172 | \u001b[39m    \u001b[36mconst\u001b[39m swimmingInterest \u001b[33m=\u001b[39m await getPeopleWithMatchingInterests(\u001b[32m\"./mockPersonApi.json\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"swimming\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 173 | \u001b[39m    expect(\u001b[33mArray\u001b[39m\u001b[33m.\u001b[39misArray(swimmingInterest))\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 175 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 176 | \u001b[39m  it(\u001b[32m\"Should return all people with a matching interest (swimming)\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:173:45)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mgetPeopleWithMatchingInterests() tests › Should return all people with a matching interest (swimming)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m[{\"age\": 47, \"height\": 170, \"id\": \"001\", \"interests\": [\"swimming\", \"reading\", \"juggling\"], \"isEmployed\": true, \"name\": \"Peter\"}, {\"age\": 22, \"height\": 160, \"id\": \"005\", \"interests\": [\"swimming\", \"watching TV\", \"knitting\"], \"isEmployed\": true, \"name\": \"Travis\"}]\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 176 | \u001b[39m  it(\u001b[32m\"Should return all people with a matching interest (swimming)\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 177 | \u001b[39m    \u001b[36mconst\u001b[39m swimmingInterest \u001b[33m=\u001b[39m await getPeopleWithMatchingInterests(\u001b[32m\"./mockPersonApi.json\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"swimming\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 178 | \u001b[39m    expect(swimmingInterest)\u001b[33m.\u001b[39mtoStrictEqual(dummySwimming)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 179 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 180 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 181 | \u001b[39m  it(\u001b[32m\"Should return all people with a matching interest (mma)\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:178:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mgetPeopleWithMatchingInterests() tests › Should return all people with a matching interest (mma)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m[{\"age\": 78, \"height\": 140, \"id\": \"003\", \"interests\": [\"knitting\", \"baking\", \"MMA\"], \"isEmployed\": false, \"name\": \"Joanna\"}, {\"age\": 32, \"height\": 190, \"id\": \"004\", \"interests\": [\"shooting\", \"MMA\", \"writing\"], \"isEmployed\": true, \"name\": \"Buzz\"}]\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 181 | \u001b[39m  it(\u001b[32m\"Should return all people with a matching interest (mma)\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 182 | \u001b[39m    \u001b[36mconst\u001b[39m mmaInterests \u001b[33m=\u001b[39m await getPeopleWithMatchingInterests(\u001b[32m\"./mockPersonApi.json\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"MMA\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 183 | \u001b[39m    expect(mmaInterests)\u001b[33m.\u001b[39mtoStrictEqual(dummyMma)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 184 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 185 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 186 | \u001b[39m  it(\u001b[32m\"Should return 'No people with interest found' if no matching interests on people\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:183:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mgetPeopleWithMatchingInterests() tests › Should return 'No people with interest found' if no matching interests on people\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"No people with interest found\"\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 186 | \u001b[39m  it(\u001b[32m\"Should return 'No people with interest found' if no matching interests on people\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 187 | \u001b[39m    \u001b[36mconst\u001b[39m noInterests \u001b[33m=\u001b[39m await getPeopleWithMatchingInterests(\u001b[32m\"./mockPersonApi.json\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"whittling\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 188 | \u001b[39m    expect(noInterests)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"No people with interest found\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 189 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 190 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 191 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:188:25)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msetDescription() tests › Should add a description key\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading '0')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 271 | \u001b[39m  it(\u001b[32m\"Should add a description key\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 272 | \u001b[39m    \u001b[36mconst\u001b[39m peopleWithDescriptions \u001b[33m=\u001b[39m await setDescriptions(\u001b[32m\"./mockPersonApi.json\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 273 | \u001b[39m    expect(peopleWithDescriptions[\u001b[35m0\u001b[39m])\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m\"description\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 274 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 275 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 276 | \u001b[39m  it(\u001b[32m\"Should add accurate description to each object\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:273:34)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msetDescription() tests › Should add accurate description to each object\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m[{\"age\": 47, \"description\": \"My name is Peter, I am 47 years old and 170cm tall. I enjoy swimming, reading and juggling. I am currently employed\", \"height\": 170, \"id\": \"001\", \"interests\": [\"swimming\", \"reading\", \"juggling\"], \"isEmployed\": true, \"name\": \"Peter\"}, {\"age\": 16, \"description\": \"My name is Georgia, I am 16 years old and 130cm tall. I enjoy writing, hiking and watching TV. I am not currently employed\", \"height\": 130, \"id\": \"002\", \"interests\": [\"writing\", \"hiking\", \"watching TV\"], \"isEmployed\": false, \"name\": \"Georgia\"}, {\"age\": 78, \"description\": \"My name is Joanna, I am 78 years old and 140cm tall. I enjoy knitting, baking and MMA. I am not currently employed\", \"height\": 140, \"id\": \"003\", \"interests\": [\"knitting\", \"baking\", \"MMA\"], \"isEmployed\": false, \"name\": \"Joanna\"}, {\"age\": 32, \"description\": \"My name is Buzz, I am 32 years old and 190cm tall. I enjoy shooting, MMA and writing. I am currently employed\", \"height\": 190, \"id\": \"004\", \"interests\": [\"shooting\", \"MMA\", \"writing\"], \"isEmployed\": true, \"name\": \"Buzz\"}, {\"age\": 22, \"description\": \"My name is Travis, I am 22 years old and 160cm tall. I enjoy swimming, watching TV and knitting. I am currently employed\", \"height\": 160, \"id\": \"005\", \"interests\": [\"swimming\", \"watching TV\", \"knitting\"], \"isEmployed\": true, \"name\": \"Travis\"}, {\"age\": 27, \"description\": \"My name is Paula, I am 27 years old and 160cm tall. I enjoy baking, hiking and shooting. I am not currently employed\", \"height\": 160, \"id\": \"006\", \"interests\": [\"baking\", \"hiking\", \"shooting\"], \"isEmployed\": false, \"name\": \"Paula\"}, {\"age\": 50, \"description\": \"My name is J, I am 50 years old and 150cm tall. I enjoy reading, juggling and knitting. I am not currently employed\", \"height\": 150, \"id\": \"007\", \"interests\": [\"reading\", \"juggling\", \"knitting\"], \"isEmployed\": false, \"name\": \"J\"}]\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 276 | \u001b[39m  it(\u001b[32m\"Should add accurate description to each object\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 277 | \u001b[39m    \u001b[36mconst\u001b[39m peopleWthDescriptions \u001b[33m=\u001b[39m await setDescriptions(\u001b[32m\"./mockPersonApi.json\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 278 | \u001b[39m    expect(peopleWthDescriptions)\u001b[33m.\u001b[39mtoStrictEqual(dummyDescriptions)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 279 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 280 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 281 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:278:35)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msetInterestDetails() tests › should call fetch twice\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected number of calls: \u001b[32m2\u001b[39m\n    Received number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 475 | \u001b[39m  it(\u001b[32m\"should call fetch twice\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 476 | \u001b[39m    await setInterestDetails(\u001b[32m\"./mockPersonApi.json\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"./mockInterestsApi.json\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 477 | \u001b[39m    expect(fetch)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m2\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 478 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 479 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 480 | \u001b[39m  it(\u001b[32m\"Should not modify original data\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:477:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msetInterestDetails() tests › Should turn the interests key into an array of objects\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading '0')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 485 | \u001b[39m  it(\u001b[32m\"Should turn the interests key into an array of objects\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 486 | \u001b[39m    \u001b[36mconst\u001b[39m detailedInterestsResponse \u001b[33m=\u001b[39m await setInterestDetails(\u001b[32m\"./mockPersonApi.json\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"./mockInterestsApi.json\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 487 | \u001b[39m    expect(\u001b[33mArray\u001b[39m\u001b[33m.\u001b[39misArray(detailedInterestsResponse[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39minterests))\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 488 | \u001b[39m    expect(detailedInterestsResponse[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39minterests[\u001b[35m0\u001b[39m])\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m\"costPerAnnum\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 489 | \u001b[39m    expect(detailedInterestsResponse[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39minterests[\u001b[35m0\u001b[39m])\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m\"interest\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 490 | \u001b[39m    expect(detailedInterestsResponse[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39minterests[\u001b[35m0\u001b[39m])\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m\"isDoneInGroups\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:487:51)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msetInterestDetails() tests › Should match the exact dummy array of objects\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoStrictEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m[{\"age\": 47, \"height\": 170, \"id\": \"001\", \"interests\": [{\"costPerAnnum\": 800, \"interest\": \"swimming\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 20000000}, {\"costPerAnnum\": 500, \"interest\": \"reading\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 30000000}, {\"costPerAnnum\": 100, \"interest\": \"juggling\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 1000000}], \"isEmployed\": true, \"name\": \"Peter\"}, {\"age\": 16, \"height\": 130, \"id\": \"002\", \"interests\": [{\"costPerAnnum\": 200, \"interest\": \"writing\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 15000000}, {\"costPerAnnum\": 1000, \"interest\": \"hiking\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 25000000}, {\"costPerAnnum\": 200, \"interest\": \"watching TV\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 450000000}], \"isEmployed\": false, \"name\": \"Georgia\"}, {\"age\": 78, \"height\": 140, \"id\": \"003\", \"interests\": [{\"costPerAnnum\": 400, \"interest\": \"knitting\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 10000000}, {\"costPerAnnum\": 400, \"interest\": \"baking\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 20000000}, {\"costPerAnnum\": 1000, \"interest\": \"MMA\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 20000000}], \"isEmployed\": false, \"name\": \"Joanna\"}, {\"age\": 32, \"height\": 190, \"id\": \"004\", \"interests\": [{\"costPerAnnum\": 10000, \"interest\": \"shooting\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 5000000}, {\"costPerAnnum\": 1000, \"interest\": \"MMA\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 20000000}, {\"costPerAnnum\": 200, \"interest\": \"writing\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 15000000}], \"isEmployed\": true, \"name\": \"Buzz\"}, {\"age\": 22, \"height\": 160, \"id\": \"005\", \"interests\": [{\"costPerAnnum\": 800, \"interest\": \"swimming\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 20000000}, {\"costPerAnnum\": 200, \"interest\": \"watching TV\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 450000000}, {\"costPerAnnum\": 400, \"interest\": \"knitting\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 10000000}], \"isEmployed\": true, \"name\": \"Travis\"}, {\"age\": 27, \"height\": 160, \"id\": \"006\", \"interests\": [{\"costPerAnnum\": 400, \"interest\": \"baking\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 20000000}, {\"costPerAnnum\": 1000, \"interest\": \"hiking\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 25000000}, {\"costPerAnnum\": 10000, \"interest\": \"shooting\", \"isDoneInGroups\": true, \"sizeOfCommunity\": 5000000}], \"isEmployed\": false, \"name\": \"Paula\"}, {\"age\": 50, \"height\": 150, \"id\": \"007\", \"interests\": [{\"costPerAnnum\": 500, \"interest\": \"reading\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 30000000}, {\"costPerAnnum\": 100, \"interest\": \"juggling\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 1000000}, {\"costPerAnnum\": 400, \"interest\": \"knitting\", \"isDoneInGroups\": false, \"sizeOfCommunity\": 10000000}], \"isEmployed\": false, \"name\": \"J\"}]\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 494 | \u001b[39m  it(\u001b[32m\"Should match the exact dummy array of objects\"\u001b[39m\u001b[33m,\u001b[39m async () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 495 | \u001b[39m    \u001b[36mconst\u001b[39m detailedInterestsResponse \u001b[33m=\u001b[39m await setInterestDetails(\u001b[32m\"./mockPersonApi.json\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"./mockInterestsApi.json\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 496 | \u001b[39m    expect(detailedInterestsResponse)\u001b[33m.\u001b[39mtoStrictEqual(dummyDetailedInterests)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 497 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 498 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 499 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js9-apis-and-fetch/js9.test.js\u001b[39m\u001b[0m\u001b[2m:496:39)\u001b[22m\u001b[2m\u001b[22m\n","name":"E:\\Work\\_Nology\\final project\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js","startTime":1662012024211,"status":"failed","summary":""}],"wasInterrupted":false}